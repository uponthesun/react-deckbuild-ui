{"version":3,"sources":["boardState.js","importExport.js","index.js"],"names":["BoardState","cardNames","numCols","this","loadCardPool","cardColumns","Array","map","_","nextId","forEach","c","createAndAddCard","cardName","newCard","name","id","currentBoard","push","getCardData","then","data","card","newCol","newIndexInCol","undefined","length","splice","col","cardCol","i","JSON","stringify","removeCard","addCard","flat","newCardColumns","Math","min","cmc","colorColumns","monocolorCards","filter","color_pile","multicolorCards","sort","c1","c2","colors","localeCompare","indexOf","a","url","encodeURI","fetch","response","json","cardJson","Object","assign","join","includes","console","error","CardPoolInput","props","rows","cols","LoadInputButton","rawInput","text","lines","split","l","trim","line","quantity","Number","isNaN","substring","n","document","getElementById","inputElementId","value","inputToCardNames","topLevelContainer","state","boardState","setState","sideboardState","type","onClick","load","React","Component","ExportButton","maindeck","sideboard","output","navigator","clipboard","writeText","alert","INITIAL_CARD_NAMES","Card","useDrag","item","collect","monitor","isDragging","drag","imageURL","useState","hoverVisible","setHoverVisible","hoverVisibility","ref","src","width","height","onDoubleClick","moveCardToOtherBoard","onMouseMove","e","onMouseLeave","style","position","top","left","zIndex","IMG_WIDTH","IMG_HEIGHT","visibility","Board","useDrop","accept","drop","dropCard","getClientOffset","mousePos","cardImages","topOffset","leftOffset","key","toString","widthPx","className","bottom","right","numCards","clientOffset","floor","x","y","moveCard","SortByCmcButton","sortByCmc","SortByColorButton","sortByColor","Instructions","float","TopLevelContainer","board","otherBoard","ReactDOM","render","DndProvider","backend","Backend"],"mappings":"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","file":"static/js/main.4ea6cd85.chunk.js","sourcesContent":["// Manages state of a \"board\". Purely a logical representation, doesn't know about React components.\nexport default class BoardState {\n  constructor(cardNames, numCols) {\n    if (!cardNames) {\n      cardNames = [];\n    }\n    this.numCols = numCols;\n    this.loadCardPool(cardNames);\n  }\n\n  async loadCardPool(cardNames) {\n    this.cardColumns = [...Array(this.numCols)].map(_ => []); // Initialize with numCols empty arrays\n    this.nextId = 0;\n    cardNames.forEach(c => this.createAndAddCard(c));\n  }\n\n  // Creates a new card object, including initializing it with Scryfall data and a unique ID,\n  // and adds it to this board.\n  async createAndAddCard(cardName) {\n    const newCard = {\n      name: cardName,\n      id: this.nextId,\n      currentBoard: this,\n    };\n    this.cardColumns[0].push(newCard);\n    this.nextId++; // TODO: Do we need to worry about concurrency? I don't think so but not positive\n\n    getCardData(cardName).then(data => newCard.data = data);\n    return newCard;\n  }\n\n  // Adds the given card object to this board. Does not create a new card object.\n  // Can optionally specify where the new card should be inserted (defaults to bottom of first column).\n  addCard(card, newCol = 0, newIndexInCol = undefined) {\n    if (!newIndexInCol || newIndexInCol > this.cardColumns[newCol].length) {\n      newIndexInCol = this.cardColumns[newCol].length;\n    }\n\n    this.cardColumns[newCol].splice(newIndexInCol, 0, card);\n    card.currentBoard = this;\n  }\n\n  // Removes the given card from this board and returns it.\n  removeCard(card) {\n    // TODO: could consider storing mapping of id to position to avoid for loop lookup\n    for (var col = 0; col < this.cardColumns.length; col++) {\n      const cardCol = this.cardColumns[col];\n      for (var i = 0; i < cardCol.length; i++) {\n        if (cardCol[i].id === card.id) {\n          cardCol.splice(i, 1);\n          return card;\n        }\n      }\n    }\n\n    throw \"Tried to remove card, but it wasn't in this board: \" + JSON.stringify(card);\n  }\n\n  // Moves a card into the specified position in this board. If it was in a different board previously,\n  // first removes it from that board.\n  async moveCard(card, newCol, newIndexInCol) {\n    card.currentBoard.removeCard(card);\n    this.addCard(card, newCol, newIndexInCol);\n  }\n\n  numCards() {\n    return this.cardColumns.flat().length;\n  }\n\n  sortByCmc() {\n    const newCardColumns = [...Array(this.numCols)].map(_ => []);\n\n    for (var card of this.cardColumns.flat()) {\n      const col = Math.min(card.data.cmc, 7); // everything CMC 7 and up goes in one pile\n      newCardColumns[col].push(card);\n    }\n\n    this.cardColumns = newCardColumns;\n    return this;\n  }\n\n  sortByColor() {\n    const newCardColumns = [...Array(this.numCols)].map(_ => []);\n\n    const colorColumns = ['L', 'W', 'U', 'B', 'R', 'G', 'C', 'M'];\n\n    const monocolorCards = this.cardColumns.flat().filter(c => c.data.color_pile !== 'M');\n    const multicolorCards = this.cardColumns.flat().filter(c => c.data.color_pile === 'M');\n    multicolorCards.sort((c1, c2) => c1.data.colors.localeCompare(c2.data.colors));\n\n    for (var card of [...monocolorCards, ...multicolorCards]) {\n      const col = colorColumns.indexOf(card.data.color_pile);\n      newCardColumns[col].push(card);\n    }\n\n    this.cardColumns = newCardColumns;\n    return this;\n  }\n}\n\nconst getCardData = async (cardName) => {\n  const url = `https://api.scryfall.com/cards/named?exact=${encodeURI(cardName)}`;\n  const response = await fetch(url);\n  var cardJson = await response.json();\n\n  try {\n    // If double-faced card, some of the fields we need will be on the faces instead.\n    // Add all the fields from the front face to the top-level object.\n    if ('card_faces' in cardJson) {\n      Object.assign(cardJson, cardJson['card_faces'][0]);\n    }\n\n    var colors = cardJson['colors'].join('');\n    var color_pile = colors;\n    if (color_pile.length > 1) {\n      color_pile = 'M' // multicolor\n    } else if (color_pile.length === 0) {\n      colors = color_pile = 'C' // colorless\n    }\n\n    if (cardJson['type_line'].includes('Land')) {\n      color_pile = 'L';\n    }\n\n    return {\n      color_pile,\n      colors,\n      cmc: cardJson['cmc'],\n    }\n  } catch (e) {\n    console.error(`Error parsing card data: ${e}. Card JSON: ${JSON.stringify(cardJson)}`);\n    throw e;\n  }\n}\n","// This file contains components and logic related to importing and exporting from text formats.\n\nimport React from 'react';\nimport BoardState from './boardState.js';\n\n// Card pool input components\nconst CardPoolInput = function (props) {\n  return (\n    <textarea id={props.id} rows=\"5\" cols=\"33\"></textarea>\n  );\n}\n\nconst isNumber = (text) => {\n  return !Number.isNaN(Number(text));\n}\n\nclass LoadInputButton extends React.Component {\n  inputToCardNames(rawInput) {\n    const lines = rawInput.split(\"\\n\").filter(l => l.trim().length > 0);\n    const cardNames = [];\n\n    for (var line of lines) {\n      // MTG Arena text format has the set name in () after the card name. Remove that portion if present.\n      line = line.split('(')[0].trim();\n\n      var quantity = 1;\n      // If the line starts with a number, consume that part of the string and store in quantity\n      if (isNumber(line[0])) {\n        const i = line.indexOf(\" \");\n        quantity = Number(line.substring(0, i));\n        line = line.substring(i).trim();\n      }\n\n      // The remaining portion of the string should be just the card name; add it n times\n      for (var n = 0; n < quantity; n++) {\n        cardNames.push(line);\n      }\n    }\n\n    return cardNames;\n  }\n\n  load() {\n    const rawInput = document.getElementById(this.props.inputElementId).value;\n    const cardNames = this.inputToCardNames(rawInput);\n    const numCols = this.props.topLevelContainer.state.boardState.numCols;\n    this.props.topLevelContainer.setState({\n      boardState: new BoardState(cardNames, numCols),\n      sideboardState: new BoardState([], 1)\n    });\n  }\n\n  render() {\n    return (\n      <input type=\"button\" onClick={() => this.load()} value=\"Load cards\" />\n    );\n  }\n}\n\n// Export button components\nconst toCockatriceFormat = (maindeck, sideboard) => {\n  return maindeck.map(c => c.name).join(\"\\n\") +\n    \"\\n\\n// Sideboard\\n\" +\n    sideboard.map(c => c.name).join(\"\\n\");\n}\n\nconst writeToClipboardAndAlert = (text) => {\n  navigator.clipboard.writeText(text)\n    .then(() => alert(`Copied to clipboard:\\n\\n${text}`),\n      () => alert(`Failed to copy to clipboard`));\n}\n\nconst ExportButton = function (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => {\n        const output = toCockatriceFormat(props.boardState.cardColumns.flat(), props.sideboardState.cardColumns.flat());\n        writeToClipboardAndAlert(output);\n      }}\n      value=\"Export to Cockatrice\" />\n  );\n}\n\nexport {\n  CardPoolInput,\n  LoadInputButton,\n  ExportButton,\n};","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Backend from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { useDrag, useDrop } from 'react-dnd'\nimport './index.css';\nimport BoardState from './boardState.js';\nimport { CardPoolInput, LoadInputButton, ExportButton } from './importExport.js';\n\nconst IMG_WIDTH = 146;\nconst IMG_HEIGHT = 204;\nconst COL_WIDTH = IMG_WIDTH + 1;\nconst CARD_STACKING_OFFSET = 25;\nconst NUM_COLS = 8; // TODO: make this consistent with css width\nconst INITIAL_CARD_NAMES = ['Battle Hymn', 'Reaper King', 'Death or Glory', 'Mindless Automaton',\n                            'Wizard Mentor', 'Crow Storm', \"Gaea's Touch\"];\n\n// Card react component - displays a single draggable card. If you hover over the normal card image, \n// also displays a larger version next to it.\nfunction Card(props) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: \"Card\", card: props.card },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const imageURL = `https://api.scryfall.com/cards/named?format=image&exact=${encodeURI(props.card.name)}`;\n\n  const [hoverVisible, setHoverVisible] = useState(false);\n  const hoverVisibility = (hoverVisible && !isDragging) ? 'visible' : 'hidden';\n\n  return (\n    [\n      // The normal version of the card.\n      <img\n        ref={drag}\n        src={imageURL} width={IMG_WIDTH} height={IMG_HEIGHT}\n        onDoubleClick={() => props.moveCardToOtherBoard(props.card)}\n        // We use onMouseMove here instead of onMouseOver because apparently onMouseOver will fire after\n        // you drag and drop the top card of a stack, leading to weird behavior.\n        onMouseMove={(e) => !hoverVisible && setHoverVisible(true)}\n        onMouseLeave={() => setHoverVisible(false)}\n        style={{\n          position: \"absolute\",\n          top: `${props.top}px`,\n          left: `${props.left}px`,\n          zIndex: `${props.zIndex}`,\n        }} />,\n      // The larger \"preview\" image - only visible when hovering over the normal version of the card.\n      <img\n        src={imageURL} width={IMG_WIDTH * 2} height={IMG_HEIGHT * 2}\n        style={{\n          visibility: hoverVisibility,\n          position: \"absolute\",\n          top: `${props.top}px`,\n          left: `${props.left + IMG_WIDTH}px`,\n          zIndex: 999\n        }}\n      />,\n    ]\n  );\n}\n\n// Board react component - the space that all the cards are in\nfunction Board(props) {\n  const [{ mousePos }, drop] = useDrop({\n    accept: \"Card\",\n    drop: (item, monitor) => dropCard(props.boardState, monitor.getClientOffset(), item.card),\n    collect: monitor => ({\n      mousePos: monitor.getClientOffset(),\n    }),\n  })\n\n  const cardImages = [];\n  const cardColumns = props.boardState.cardColumns;\n  for (var col = 0; col < cardColumns.length; col++) {\n    for (var i = 0; i < cardColumns[col].length; i++) {\n      const card = cardColumns[col][i]\n      const topOffset = CARD_STACKING_OFFSET * i;\n      const leftOffset = COL_WIDTH * col;\n\n      cardImages.push(<Card\n        key={card.id.toString()}\n        card={card}\n        top={topOffset}\n        left={leftOffset}\n        zIndex={i}\n        moveCardToOtherBoard={props.moveCardToOtherBoard}\n      />);\n    }\n  }\n\n  const widthPx = COL_WIDTH * props.boardState.numCols;\n  return (\n    <div ref={drop} className=\"card-space\" style={{position: \"relative\", width: `${widthPx}px`}}>\n      {cardImages}\n      <div style={{position: \"absolute\", bottom: \"5px\", right: \"5px\"}}>{props.boardState.numCards()} cards</div>\n    </div>\n  );\n}\n\n// Helper used by Board\nconst dropCard = (boardState, clientOffset, card) => {\n  const newCol = Math.min(Math.floor(clientOffset.x / COL_WIDTH), boardState.numCols - 1);\n  const newIndexInCol = Math.floor(clientOffset.y / CARD_STACKING_OFFSET);\n\n  boardState.moveCard(card, newCol, newIndexInCol);\n}\n\n// Sort components\nfunction SortByCmcButton (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => props.topLevelContainer.setState({boardState: props.topLevelContainer.state.boardState.sortByCmc()})}\n      value=\"Sort by CMC\" />\n  );\n}\n\nfunction SortByColorButton (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => props.topLevelContainer.setState({boardState: props.topLevelContainer.state.boardState.sortByColor()})}\n      value=\"Sort by Color\" />\n  );\n}\n\n// Instructions component\nfunction Instructions (props) {\n  return (\n    <div  style={{float: 'right'}}>\n      Large space is the maindeck, smaller space is the sideboard. <br />\n      Drag and drop to move cards around. <br />\n      Double-click a card to move it from the maindeck to sideboard or vice versa. <br />\n      Multiple formats are supported for \"Load cards\", including MTG Arena. <br />\n      Valid example lines: <br />\n      Wizard Mentor <br />\n      1 Battle Hymn <br />\n      5 Forest <br />\n      1 Cogwork Assembler (AER) 145\n    </div>\n  );\n}\n\n// Top-level container component to put everything together\nclass TopLevelContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      boardState: new BoardState(INITIAL_CARD_NAMES, NUM_COLS),\n      sideboardState: new BoardState([], 1),\n    };\n  }\n  \n  moveCardToOtherBoard(card, board, otherBoard) {\n    board.removeCard(card);\n    otherBoard.addCard(card);\n    // Hacky way to force everything to re-render; TODO: make board states immutable and directly set the state with new versions\n    this.setState(this.state);\n  }\n\n  render() {\n    const CARD_POOL_INPUT_ELEMENT_ID = 'card-pool-input';\n    const moveCardToSideboard = (card) => {\n      this.moveCardToOtherBoard(card, this.state.boardState, this.state.sideboardState);\n    }\n    const moveCardToMainboard = (card) => {\n      this.moveCardToOtherBoard(card, this.state.sideboardState, this.state.boardState);\n    }\n    \n    return (\n      <div>\n        <Board boardState={this.state.boardState} moveCardToOtherBoard={moveCardToSideboard} />\n        <Board boardState={this.state.sideboardState} moveCardToOtherBoard={moveCardToMainboard} />\n        <CardPoolInput id={CARD_POOL_INPUT_ELEMENT_ID} />\n        <LoadInputButton inputElementId={CARD_POOL_INPUT_ELEMENT_ID} topLevelContainer={this} />\n        <SortByCmcButton topLevelContainer={this} />\n        <SortByColorButton topLevelContainer={this} />\n        <ExportButton boardState={this.state.boardState} sideboardState={this.state.sideboardState} />\n        <Instructions />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <DndProvider backend={Backend}>\n    <TopLevelContainer />\n  </DndProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}