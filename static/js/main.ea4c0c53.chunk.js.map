{"version":3,"sources":["boardState.js","importExport.js","landAdder.js","cardLoader.js","index.js"],"names":["BoardState","cardLoader","cardEntries","numCols","parentComponent","this","loadCardPool","cardColumns","Array","map","_","entry","createAndAddCards","then","value","setState","cardEntry","n","quantity","getCardData","name","set","newCard","currentBoard","push","result","card","newCol","newIndexInCol","undefined","length","splice","col","cardCol","i","id","JSON","stringify","removeCard","addCard","flat","newCardColumns","Math","min","data","cmc","colorColumns","monocolorCards","filter","c","color_pile","multicolorCards","sort","c1","c2","colors","localeCompare","indexOf","CardPoolInput","props","rows","cols","LoadInputButton","line","text","split","part1","part2","Number","isNaN","trim","quantityPart","substring","endsWith","slice","rawInput","lines","l","sections","currentSection","includes","parseLine","document","getElementById","inputElementId","parseInput","maindeckCardEntries","sideboardCardEntries","topLevelContainer","state","boardState","sideboardState","type","onClick","load","React","Component","ExportButton","maindeck","sideboard","output","join","navigator","clipboard","writeText","alert","LandAdder","selectorId","inputCountId","max","placeholder","land","count","parseInt","addLand","CardLoader","nextId","cardDataCache","cardName","getScryfallCardData","url","encodeURI","fetch","response","json","cardJson","Object","assign","imageURL","console","error","INITIAL_CARD_ENTRIES","Card","useDrag","item","collect","monitor","isDragging","drag","useState","hoverVisible","setHoverVisible","hoverVisibility","ref","src","width","height","onDoubleClick","moveCardToOtherBoard","onMouseMove","e","onMouseLeave","style","position","top","left","zIndex","IMG_WIDTH","IMG_HEIGHT","visibility","Board","useDrop","accept","drop","dropCard","getClientOffset","mousePos","cardImages","topOffset","leftOffset","key","toString","widthPx","className","bottom","right","numCards","clientOffset","floor","x","y","moveCard","SortByCmcButton","sortByCmc","SortByColorButton","sortByColor","Instructions","float","TopLevelContainer","board","otherBoard","landName","ReactDOM","render","DndProvider","backend","Backend"],"mappings":"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","file":"static/js/main.ea4c0c53.chunk.js","sourcesContent":["// Manages state of a \"board\". Purely a logical representation, doesn't know about React components.\nexport default class BoardState {\n  // cardEntries - Array of objects with keys: {name, quantity, set}\n  constructor(cardLoader, cardEntries, numCols, parentComponent = null) {\n    this.cardLoader = cardLoader;\n    this.numCols = numCols;\n    this.loadCardPool(cardEntries, parentComponent);\n  }\n\n  async loadCardPool(cardEntries, parentComponent) {\n    this.cardColumns = [...Array(this.numCols)].map(_ => []); // Initialize with numCols empty arrays\n    for (var entry of cardEntries) {\n      // TODO: A major refactor is needed to simplify state management. Not sure how best to it,\n      // but one option could be to merge this class with the Board react component. Until then,\n      // we need this manual refresh.\n      this.createAndAddCards(entry).then(value => {\n        if (parentComponent) {\n          parentComponent.setState({});\n        }\n      })\n    }\n  }\n\n  // Creates a new card object, including initializing it with Scryfall data and a unique ID,\n  // and adds it to this board.\n  async createAndAddCards(cardEntry) {\n    var result;\n    for (var n = 0; n < cardEntry.quantity; n++) {\n      const newCard = await this.cardLoader.getCardData(cardEntry.name, cardEntry.set);\n      newCard.currentBoard = this;\n      this.cardColumns[0].push(newCard);\n      result = newCard;\n    }\n    return result;\n  }\n\n  // Adds the given card object to this board. Does not create a new card object.\n  // Can optionally specify where the new card should be inserted (defaults to bottom of first column).\n  addCard(card, newCol = 0, newIndexInCol = undefined) {\n    if (!newIndexInCol || newIndexInCol > this.cardColumns[newCol].length) {\n      newIndexInCol = this.cardColumns[newCol].length;\n    }\n\n    this.cardColumns[newCol].splice(newIndexInCol, 0, card);\n    card.currentBoard = this;\n  }\n\n  // Removes the given card from this board and returns it.\n  removeCard(card) {\n    // TODO: could consider storing mapping of id to position to avoid for loop lookup\n    for (var col = 0; col < this.cardColumns.length; col++) {\n      const cardCol = this.cardColumns[col];\n      for (var i = 0; i < cardCol.length; i++) {\n        if (cardCol[i].id === card.id) {\n          cardCol.splice(i, 1);\n          return card;\n        }\n      }\n    }\n\n    throw \"Tried to remove card, but it wasn't in this board: \" + JSON.stringify(card);\n  }\n\n  // Moves a card into the specified position in this board. If it was in a different board previously,\n  // first removes it from that board.\n  async moveCard(card, newCol, newIndexInCol) {\n    card.currentBoard.removeCard(card);\n    this.addCard(card, newCol, newIndexInCol);\n  }\n\n  numCards() {\n    return this.cardColumns.flat().length;\n  }\n\n  sortByCmc() {\n    const newCardColumns = [...Array(this.numCols)].map(_ => []);\n\n    for (var card of this.cardColumns.flat()) {\n      const col = Math.min(card.data.cmc, 7); // everything CMC 7 and up goes in one pile\n      newCardColumns[col].push(card);\n    }\n\n    this.cardColumns = newCardColumns;\n    return this;\n  }\n\n  sortByColor() {\n    const newCardColumns = [...Array(this.numCols)].map(_ => []);\n\n    const colorColumns = ['L', 'W', 'U', 'B', 'R', 'G', 'C', 'M'];\n\n    const monocolorCards = this.cardColumns.flat().filter(c => c.data.color_pile !== 'M');\n    const multicolorCards = this.cardColumns.flat().filter(c => c.data.color_pile === 'M');\n    multicolorCards.sort((c1, c2) => c1.data.colors.localeCompare(c2.data.colors));\n\n    for (var card of [...monocolorCards, ...multicolorCards]) {\n      const col = colorColumns.indexOf(card.data.color_pile);\n      newCardColumns[col].push(card);\n    }\n\n    this.cardColumns = newCardColumns;\n    return this;\n  }\n}\n\n","// This file contains components and logic related to importing and exporting from text formats.\n\nimport React from 'react';\nimport BoardState from './boardState.js';\n\n// Card pool input components\nconst CardPoolInput = function (props) {\n  return (\n    <textarea id={props.id} rows=\"5\" cols=\"33\"></textarea>\n  );\n}\n\nconst isNumber = (text) => {\n  return !Number.isNaN(Number(text));\n}\n\nclass LoadInputButton extends React.Component {\n  parseLine(line) {\n    var [part1, part2] = line.split('(');\n\n    var quantity, name;\n    // If the line starts with a number, consume that part of the string and store in quantity\n    if (isNumber(part1[0])) {\n      const i = part1.indexOf(' ');\n      var quantityPart = part1.substring(0, i)\n      if (quantityPart.endsWith('x')) {\n        quantityPart = quantityPart.slice(0, -1); // trim off \"x\" in the case of \"1x <cardname>\"\n      }\n      quantity = Number(quantityPart);\n      name = part1.substring(i).trim();\n    } else {\n      quantity = 1;\n      name = part1.trim();\n    }\n\n    var set = ''\n    if (part2) {\n      set = part2.split(')')[0].trim();\n    }\n\n    return {name, quantity, set};\n  }\n\n  parseInput(rawInput) {\n    const lines = rawInput.split(\"\\n\").filter(l => l.trim().length > 0);\n    const sections = [[], []]; // two sections - maindeck and sideboard\n    var currentSection = sections[0];\n\n    for (var line of lines) {\n      if (line.includes('Sideboard')) {\n        currentSection = sections[1];\n        continue;\n      }\n\n      currentSection.push(this.parseLine(line));\n    }\n\n    return sections;\n  }\n\n  load() {\n    const rawInput = document.getElementById(this.props.inputElementId).value;\n    const [maindeckCardEntries, sideboardCardEntries] = this.parseInput(rawInput);\n\n    const numCols = this.props.topLevelContainer.state.boardState.numCols;\n    const cardLoader = this.props.topLevelContainer.state.cardLoader;\n    this.props.topLevelContainer.setState({\n      boardState: new BoardState(cardLoader, maindeckCardEntries, numCols, this.props.topLevelContainer),\n      sideboardState: new BoardState(cardLoader, sideboardCardEntries, 1, this.props.topLevelContainer)\n    });\n  }\n\n  render() {\n    return (\n      <input type=\"button\" onClick={() => this.load()} value=\"Load cards\" />\n    );\n  }\n}\n\n// Export button components\nconst toCockatriceFormat = (maindeck, sideboard) => {\n  return maindeck.map(c => c.name).join(\"\\n\") +\n    \"\\n\\n// Sideboard\\n\" +\n    sideboard.map(c => c.name).join(\"\\n\");\n}\n\nconst writeToClipboardAndAlert = (text) => {\n  navigator.clipboard.writeText(text)\n    .then(() => alert(`Copied to clipboard:\\n\\n${text}`),\n      () => alert(`Failed to copy to clipboard`));\n}\n\nconst ExportButton = function (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => {\n        const output = toCockatriceFormat(props.boardState.cardColumns.flat(), props.sideboardState.cardColumns.flat());\n        writeToClipboardAndAlert(output);\n      }}\n      value=\"Export to Cockatrice\" />\n  );\n}\n\nexport {\n  CardPoolInput,\n  LoadInputButton,\n  ExportButton,\n};","// This file contains a component for adding basic lands to the deck.\n\nimport React from 'react';\n\nfunction LandAdder(props) {\n  const selectorId = props.id + '-selector';\n  const inputCountId = props.id + '-input-count';\n\n  return (\n    <div>\n      <select id={selectorId}>\n        <option value='Snow-Covered Plains'>Snow-Covered Plains</option>\n        <option value='Snow-Covered Island'>Snow-Covered Island</option>\n        <option value='Snow-Covered Swamp'>Snow-Covered Swamp</option>\n        <option value='Snow-Covered Mountain'>Snow-Covered Mountain</option>\n        <option value='Snow-Covered Forest'>Snow-Covered Forest</option>\n      </select>\n      <input type='number'\n        min='0'\n        max='20'\n        placeholder='1'\n        id={inputCountId}\n      />\n      <input type='button'\n        onClick={() => {\n          const land = document.getElementById(selectorId).value;\n          const count = parseInt(document.getElementById(inputCountId).value) || 1;\n          props.addLand(land, count)\n        }}\n        value='Add Basic Lands'\n      />\n    </div>\n  );\n}\n\nexport {\n  LandAdder,\n};","// This file contains logic for loading card data from Scryfall\nexport default class CardLoader {\n  constructor() {\n    this.nextId = 0;\n    this.cardDataCache = {};\n  }\n\n  async getCardData(cardName, set = '') {\n    const newCard = {\n      name: cardName,\n      id: this.nextId,\n    };\n    this.nextId++;   \n\n    if (!this.cardDataCache[cardName]) {\n      this.cardDataCache[cardName] = {};\n    }\n\n    if (!this.cardDataCache[cardName][set]) {\n      this.cardDataCache[cardName][set] = await this.getScryfallCardData(cardName, set);\n    }\n\n    newCard.data = this.cardDataCache[cardName][set];\n    return newCard;\n  }\n\n  async getScryfallCardData(cardName, set = '') {\n    const url = `https://api.scryfall.com/cards/named?exact=${encodeURI(cardName)}&set=${set}`;\n    const response = await fetch(url);\n    var cardJson = await response.json();\n\n    try {\n      // If double-faced card, some of the fields we need will be on the faces instead.\n      // Add all the fields from the front face to the top-level object.\n      if ('card_faces' in cardJson) {\n        Object.assign(cardJson, cardJson['card_faces'][0]);\n      }\n\n      var colors = cardJson['colors'].join('');\n      var color_pile = colors;\n      if (color_pile.length > 1) {\n        color_pile = 'M' // multicolor\n      } else if (color_pile.length === 0) {\n        colors = color_pile = 'C' // colorless\n      }\n\n      if (cardJson['type_line'].includes('Land')) {\n        color_pile = 'L';\n      }\n      \n      return {\n        color_pile,\n        colors,\n        cmc: cardJson['cmc'],\n        imageURL: cardJson['image_uris']['normal']\n      }\n    } catch (e) {\n      console.error(`Error parsing card data: ${e}. Card JSON: ${JSON.stringify(cardJson)}`);\n      return {\n        color_pile : 'C',\n        colors: 'C',\n        cmc: 0,\n        imageURL: `https://api.scryfall.com/cards/named?format=image&exact=${cardName}`\n      }\n    }\n  }\n}","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Backend from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { useDrag, useDrop } from 'react-dnd'\nimport './index.css';\nimport BoardState from './boardState.js';\nimport { CardPoolInput, LoadInputButton, ExportButton } from './importExport.js';\nimport { LandAdder } from './landAdder.js';\nimport CardLoader from './cardLoader.js';\n\nconst IMG_WIDTH = 146;\nconst IMG_HEIGHT = 204;\nconst COL_WIDTH = IMG_WIDTH + 1;\nconst CARD_STACKING_OFFSET = 25;\nconst NUM_COLS = 8; // TODO: make this consistent with css width\nconst INITIAL_CARD_NAMES = ['Battle Hymn', 'Reaper King', 'Death or Glory', 'Mindless Automaton',\n                            'Wizard Mentor', 'Crow Storm', \"Gaea's Touch\"];\nconst INITIAL_CARD_ENTRIES = INITIAL_CARD_NAMES.map(name => ({name, quantity: 1, set: ''}));\n\n// Card react component - displays a single draggable card. If you hover over the normal card image, \n// also displays a larger version next to it.\nfunction Card(props) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: \"Card\", card: props.card },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const imageURL = props.card.data ? props.card.data.imageURL : ''\n\n  const [hoverVisible, setHoverVisible] = useState(false);\n  const hoverVisibility = (hoverVisible && !isDragging) ? 'visible' : 'hidden';\n\n  return (\n    [\n      // The normal version of the card.\n      <img\n        ref={drag}\n        src={imageURL} width={IMG_WIDTH} height={IMG_HEIGHT}\n        onDoubleClick={() => props.moveCardToOtherBoard(props.card)}\n        // We use onMouseMove here instead of onMouseOver because apparently onMouseOver will fire after\n        // you drag and drop the top card of a stack, leading to weird behavior.\n        onMouseMove={(e) => !hoverVisible && setHoverVisible(true)}\n        onMouseLeave={() => setHoverVisible(false)}\n        style={{\n          position: \"absolute\",\n          top: `${props.top}px`,\n          left: `${props.left}px`,\n          zIndex: `${props.zIndex}`,\n        }} />,\n      // The larger \"preview\" image - only visible when hovering over the normal version of the card.\n      <img\n        src={imageURL} width={IMG_WIDTH * 2} height={IMG_HEIGHT * 2}\n        style={{\n          visibility: hoverVisibility,\n          position: \"absolute\",\n          top: `${props.top}px`,\n          left: `${props.left + IMG_WIDTH}px`,\n          zIndex: 999\n        }}\n      />,\n    ]\n  );\n}\n\n// Board react component - the space that all the cards are in\nfunction Board(props) {\n  const [{ mousePos }, drop] = useDrop({\n    accept: \"Card\",\n    drop: (item, monitor) => dropCard(props.boardState, monitor.getClientOffset(), item.card),\n    collect: monitor => ({\n      mousePos: monitor.getClientOffset(),\n    }),\n  })\n\n  const cardImages = [];\n  const cardColumns = props.boardState.cardColumns;\n  for (var col = 0; col < cardColumns.length; col++) {\n    for (var i = 0; i < cardColumns[col].length; i++) {\n      const card = cardColumns[col][i]\n      const topOffset = CARD_STACKING_OFFSET * i;\n      const leftOffset = COL_WIDTH * col;\n\n      cardImages.push(<Card\n        key={card.id.toString()}\n        card={card}\n        top={topOffset}\n        left={leftOffset}\n        zIndex={i}\n        moveCardToOtherBoard={props.moveCardToOtherBoard}\n      />);\n    }\n  }\n\n  const widthPx = COL_WIDTH * props.boardState.numCols;\n  return (\n    <div ref={drop} className=\"card-space\" style={{position: \"relative\", width: `${widthPx}px`}}>\n      {cardImages}\n      <div style={{position: \"absolute\", bottom: \"5px\", right: \"5px\"}}>{props.boardState.numCards()} cards</div>\n    </div>\n  );\n}\n\n// Helper used by Board\nconst dropCard = (boardState, clientOffset, card) => {\n  const newCol = Math.min(Math.floor(clientOffset.x / COL_WIDTH), boardState.numCols - 1);\n  const newIndexInCol = Math.floor(clientOffset.y / CARD_STACKING_OFFSET);\n\n  boardState.moveCard(card, newCol, newIndexInCol);\n}\n\n// Sort components\nfunction SortByCmcButton (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => props.topLevelContainer.setState({boardState: props.topLevelContainer.state.boardState.sortByCmc()})}\n      value=\"Sort by CMC\" />\n  );\n}\n\nfunction SortByColorButton (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => props.topLevelContainer.setState({boardState: props.topLevelContainer.state.boardState.sortByColor()})}\n      value=\"Sort by Color\" />\n  );\n}\n\n// Instructions component\nfunction Instructions (props) {\n  return (\n    <div  style={{float: 'right'}}>\n      Large space is the maindeck, smaller space is the sideboard. <br />\n      Drag and drop to move cards around. <br />\n      Double-click a card to move it from the maindeck to sideboard or vice versa. <br />\n      Multiple formats are supported for \"Load cards\", including MTG Arena. <br />\n      Valid example lines: <br />\n      Wizard Mentor <br />\n      1 Battle Hymn <br />\n      5 Forest <br />\n      1 Cogwork Assembler (AER) 145\n    </div>\n  );\n}\n\n// Top-level container component to put everything together\nclass TopLevelContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const cardLoader = new CardLoader();\n    this.state = {\n      cardLoader: cardLoader,\n      boardState: new BoardState(cardLoader, INITIAL_CARD_ENTRIES, NUM_COLS, this),\n      sideboardState: new BoardState(cardLoader, [], 1, this),\n    };\n  }\n  \n  moveCardToOtherBoard(card, board, otherBoard) {\n    board.removeCard(card);\n    otherBoard.addCard(card);\n    // Hacky way to force everything to re-render; TODO: make board states immutable and directly set the state with new versions\n    this.setState({});\n  }\n\n  async addLand(landName, count) {\n    const currentBoard = this.state.boardState;\n    const cardLoader = this.state.cardLoader;\n    for (var _ of Array(count)) {\n      const card = await cardLoader.getCardData(landName)\n      currentBoard.addCard(card)\n    }\n\n    this.setState({});\n  }\n\n  render() {\n    const CARD_POOL_INPUT_ELEMENT_ID = 'card-pool-input';\n    const moveCardToSideboard = (card) => {\n      this.moveCardToOtherBoard(card, this.state.boardState, this.state.sideboardState);\n    }\n    const moveCardToMainboard = (card) => {\n      this.moveCardToOtherBoard(card, this.state.sideboardState, this.state.boardState);\n    }\n    \n    return (\n      <div>\n        <Board boardState={this.state.boardState} moveCardToOtherBoard={moveCardToSideboard} />\n        <Board boardState={this.state.sideboardState} moveCardToOtherBoard={moveCardToMainboard} />\n        <CardPoolInput id={CARD_POOL_INPUT_ELEMENT_ID} />\n        <LoadInputButton inputElementId={CARD_POOL_INPUT_ELEMENT_ID} topLevelContainer={this} />\n        <SortByCmcButton topLevelContainer={this} />\n        <SortByColorButton topLevelContainer={this} />\n        <ExportButton boardState={this.state.boardState} sideboardState={this.state.sideboardState} />\n        <LandAdder addLand={(land, count) => this.addLand(land, count)}/>\n        <Instructions />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <DndProvider backend={Backend}>\n    <TopLevelContainer />\n  </DndProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}