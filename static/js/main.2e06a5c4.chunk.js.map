{"version":3,"sources":["boardState.js","importExport.js","landAdder.js","cardLoader.js","sampleHand.js","index.js"],"names":["BoardState","cardLoader","cardEntries","numCols","parentComponent","this","loadCardPool","cardColumns","Array","map","_","entry","createAndAddCards","then","value","setState","cardEntry","n","quantity","getCardData","name","set","newCard","currentBoard","push","result","card","newCol","newIndexInCol","undefined","length","splice","col","cardCol","i","id","JSON","stringify","removeCard","addCard","flat","newCardColumns","Math","min","data","cmc","sort","c1","c2","localeCompare","colorColumns","monocolorCards","filter","c","color_pile","multicolorCards","colors","indexOf","includeSet","cardToText","line","counts","cardAsText","hasOwnProperty","Object","entries","join","CardPoolInput","props","rows","cols","initialText","parseCardPoolText","cardPoolText","lines","split","l","trim","sections","currentSection","includes","parseLine","text","part1","part2","Number","isNaN","quantityPart","substring","endsWith","slice","LoadInputButton","rawInput","document","getElementById","inputElementId","maindeckCardEntries","sideboardCardEntries","topLevelContainer","state","boardState","sideboardState","type","onClick","load","React","Component","cardPoolToText","maindeck","sideboard","asText","writeToClipboardAndAlert","navigator","clipboard","writeText","alert","ExportButton","output","SaveLinkButton","encoded","window","btoa","history","replaceState","location","href","LandAdder","selectorId","inputCountId","max","placeholder","land","count","parseInt","addLand","CardLoader","nextId","cardDataCache","cardName","getScryfallCardData","url","encodeURI","fetch","response","json","cardJson","assign","imageURL","console","error","SampleHandModalButton","showModal","handleOpenModal","handleCloseModal","isOpen","onRequestClose","contentLabel","style","overlay","zIndex","maindeckBoardState","SampleHandModalContent","getNewHandState","shuffledDeck","a","j","floor","random","shuffle","getCards","hand","numCardsToDraw","pop","images","src","width","height","drawCard","DEFAULT_INITIAL_CARDS","Card","useDrag","item","collect","monitor","isDragging","drag","useState","hoverVisible","setHoverVisible","hoverVisibility","ref","moveCardToOtherBoard","onMouseMove","e","onMouseLeave","position","top","left","IMG_WIDTH","IMG_HEIGHT","visibility","Board","useDrop","accept","drop","dropCard","getClientOffset","mousePos","cardImages","topOffset","leftOffset","key","toString","widthPx","className","bottom","right","numCards","clientOffset","x","y","moveCard","SortByCmcButton","sortByCmc","SortByColorButton","sortByColor","Instructions","float","initialCards","encodedCardsFromParams","URLSearchParams","search","get","atob","TopLevelContainer","board","otherBoard","landName","ReactDOM","render","options","HTML5toTouch"],"mappings":"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","file":"static/js/main.2e06a5c4.chunk.js","sourcesContent":["// Manages state of a \"board\". Purely a logical representation, doesn't know about React components.\nexport default class BoardState {\n  // cardEntries - Array of objects with keys: {name, quantity, set}\n  constructor(cardLoader, cardEntries, numCols, parentComponent = null) {\n    this.cardLoader = cardLoader;\n    this.numCols = numCols;\n    this.loadCardPool(cardEntries, parentComponent);\n  }\n\n  async loadCardPool(cardEntries, parentComponent) {\n    this.cardColumns = [...Array(this.numCols)].map(_ => []); // Initialize with numCols empty arrays\n    for (var entry of cardEntries) {\n      // TODO: A major refactor is needed to simplify state management. Not sure how best to it,\n      // but one option could be to merge this class with the Board react component. Until then,\n      // we need this manual refresh.\n      this.createAndAddCards(entry).then(value => {\n        if (parentComponent) {\n          parentComponent.setState({});\n        }\n      })\n    }\n  }\n\n  // Creates a new card object, including initializing it with Scryfall data and a unique ID,\n  // and adds it to this board.\n  async createAndAddCards(cardEntry) {\n    var result;\n    for (var n = 0; n < cardEntry.quantity; n++) {\n      const newCard = await this.cardLoader.getCardData(cardEntry.name, cardEntry.set);\n      newCard.currentBoard = this;\n      this.cardColumns[0].push(newCard);\n      result = newCard;\n    }\n    return result;\n  }\n\n  // Adds the given card object to this board. Does not create a new card object.\n  // Can optionally specify where the new card should be inserted (defaults to bottom of first column).\n  addCard(card, newCol = 0, newIndexInCol = undefined) {\n    if (!newIndexInCol || newIndexInCol > this.cardColumns[newCol].length) {\n      newIndexInCol = this.cardColumns[newCol].length;\n    }\n\n    this.cardColumns[newCol].splice(newIndexInCol, 0, card);\n    card.currentBoard = this;\n  }\n\n  // Removes the given card from this board and returns it.\n  removeCard(card) {\n    // TODO: could consider storing mapping of id to position to avoid for loop lookup\n    for (var col = 0; col < this.cardColumns.length; col++) {\n      const cardCol = this.cardColumns[col];\n      for (var i = 0; i < cardCol.length; i++) {\n        if (cardCol[i].id === card.id) {\n          cardCol.splice(i, 1);\n          return card;\n        }\n      }\n    }\n\n    throw \"Tried to remove card, but it wasn't in this board: \" + JSON.stringify(card);\n  }\n\n  // Moves a card into the specified position in this board. If it was in a different board previously,\n  // first removes it from that board.\n  async moveCard(card, newCol, newIndexInCol) {\n    card.currentBoard.removeCard(card);\n    this.addCard(card, newCol, newIndexInCol);\n  }\n\n  numCards() {\n    return this.cardColumns.flat().length;\n  }\n\n  getCards() {\n    return this.cardColumns.flat();\n  }\n\n  sortByCmc() {\n    const newCardColumns = [...Array(this.numCols)].map(_ => []);\n\n    for (var card of this.cardColumns.flat()) {\n      const col = Math.min(card.data.cmc, 7); // everything CMC 7 and up goes in one pile\n      newCardColumns[col].push(card);\n    }\n    for (var column of newCardColumns) {\n      column.sort((c1, c2) => c1.name.localeCompare(c2.name))\n    }\n\n    this.cardColumns = newCardColumns;\n    return this;\n  }\n\n  sortByColor() {\n    const newCardColumns = [...Array(this.numCols)].map(_ => []);\n\n    const colorColumns = ['L', 'W', 'U', 'B', 'R', 'G', 'C', 'M'];\n\n    const monocolorCards = this.cardColumns.flat().filter(c => c.data.color_pile !== 'M');\n    const multicolorCards = this.cardColumns.flat().filter(c => c.data.color_pile === 'M');\n    multicolorCards.sort((c1, c2) => c1.data.colors.localeCompare(c2.data.colors));\n\n    for (var card of [...monocolorCards, ...multicolorCards]) {\n      const col = colorColumns.indexOf(card.data.color_pile);\n      newCardColumns[col].push(card);\n    }\n    for (var column of newCardColumns) {\n      column.sort((c1, c2) => c1.name.localeCompare(c2.name))\n    }\n\n    this.cardColumns = newCardColumns;\n    return this;\n  }\n\n  asText(includeSet) {\n    const cardToText = (c) => {\n      var line = c.name;\n      if (includeSet && c.set) {\n        line += ` (${c.set})`\n      }\n      return line;\n    };\n\n    const counts = {};\n    for (var card of this.cardColumns.flat()) {\n      const cardAsText = cardToText(card);\n      if (!counts.hasOwnProperty(cardAsText)) {\n        counts[cardAsText] = 0;\n      }\n      counts[cardAsText]++;\n    }\n\n    return Object.entries(counts).map(entry => `${entry[1]} ${entry[0]}`).join(\"\\n\");\n  }\n}\n\n","// This file contains components and logic related to importing and exporting from text formats.\n\nimport React from 'react';\nimport BoardState from './boardState.js';\n\n// Card pool input components\nconst CardPoolInput = function (props) {\n  return (\n    <textarea id={props.id} rows=\"5\" cols=\"33\">{props.initialText}</textarea>\n  );\n}\n\nconst isNumber = (text) => {\n  return !Number.isNaN(Number(text));\n}\n\nconst parseCardPoolText = (cardPoolText) => {\n  const lines = cardPoolText.split(\"\\n\").filter(l => l.trim().length > 0);\n  const sections = [[], []]; // two sections - maindeck and sideboard\n  var currentSection = sections[0];\n\n  for (var line of lines) {\n    if (line.includes('Sideboard')) {\n      currentSection = sections[1];\n      continue;\n    }\n\n    currentSection.push(parseLine(line));\n  }\n\n  return sections;\n}\n\nconst parseLine = (line) => {\n  var [part1, part2] = line.split('(');\n\n  var quantity, name;\n  // If the line starts with a number, consume that part of the string and store in quantity\n  if (isNumber(part1[0])) {\n    const i = part1.indexOf(' ');\n    var quantityPart = part1.substring(0, i)\n    if (quantityPart.endsWith('x')) {\n      quantityPart = quantityPart.slice(0, -1); // trim off \"x\" in the case of \"1x <cardname>\"\n    }\n    quantity = Number(quantityPart);\n    name = part1.substring(i).trim();\n  } else {\n    quantity = 1;\n    name = part1.trim();\n  }\n\n  var set = ''\n  if (part2) {\n    set = part2.split(')')[0].trim();\n  }\n\n  return {name, quantity, set};\n}\n\nclass LoadInputButton extends React.Component {\n  load() {\n    const rawInput = document.getElementById(this.props.inputElementId).value;\n    const [maindeckCardEntries, sideboardCardEntries] = parseCardPoolText(rawInput);\n\n    const numCols = this.props.topLevelContainer.state.boardState.numCols;\n    const cardLoader = this.props.topLevelContainer.state.cardLoader;\n    this.props.topLevelContainer.setState({\n      boardState: new BoardState(cardLoader, maindeckCardEntries, numCols, this.props.topLevelContainer),\n      sideboardState: new BoardState(cardLoader, sideboardCardEntries, 1, this.props.topLevelContainer)\n    });\n  }\n\n  render() {\n    return (\n      <input type=\"button\" onClick={() => this.load()} value=\"Load cards\" />\n    );\n  }\n}\n\nconst cardPoolToText = (maindeck, sideboard, includeSet) => {\n  return maindeck.asText(includeSet) +\n    \"\\n\\n// Sideboard\\n\" +\n    sideboard.asText(includeSet);\n}\n\n// Export button components\nconst writeToClipboardAndAlert = (text) => {\n  navigator.clipboard.writeText(text)\n    .then(() => alert(`Copied to clipboard:\\n\\n${text}`),\n      () => alert(`Failed to copy to clipboard`));\n}\n\nconst ExportButton = function (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => {\n        const output = cardPoolToText(props.boardState, props.sideboardState, false);\n        writeToClipboardAndAlert(output);\n      }}\n      value=\"Export to Cockatrice\" />\n  );\n}\n\n// Copy link button components\nconst SaveLinkButton = function (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => {\n        const encoded = window.btoa(cardPoolToText(props.boardState, props.sideboardState, true));\n        window.history.replaceState({}, '', `?cards=${encoded}`);\n        writeToClipboardAndAlert(window.location.href);\n      }}\n      value=\"Copy Link\" />\n  );\n}\n\nexport {\n  CardPoolInput,\n  LoadInputButton,\n  ExportButton,\n  SaveLinkButton,\n  parseCardPoolText,\n};","// This file contains a component for adding basic lands to the deck.\n\nimport React from 'react';\n\nfunction LandAdder(props) {\n  const selectorId = props.id + '-selector';\n  const inputCountId = props.id + '-input-count';\n\n  return (\n    <div>\n      <select id={selectorId}>\n        <option value='Snow-Covered Plains'>Snow-Covered Plains</option>\n        <option value='Snow-Covered Island'>Snow-Covered Island</option>\n        <option value='Snow-Covered Swamp'>Snow-Covered Swamp</option>\n        <option value='Snow-Covered Mountain'>Snow-Covered Mountain</option>\n        <option value='Snow-Covered Forest'>Snow-Covered Forest</option>\n      </select>\n      <input type='number'\n        min='0'\n        max='20'\n        placeholder='1'\n        id={inputCountId}\n      />\n      <input type='button'\n        onClick={() => {\n          const land = document.getElementById(selectorId).value;\n          const count = parseInt(document.getElementById(inputCountId).value) || 1;\n          props.addLand(land, count, 'ICE')\n        }}\n        value='Add Basic Lands'\n      />\n    </div>\n  );\n}\n\nexport {\n  LandAdder,\n};","// This file contains logic for loading card data from Scryfall\nexport default class CardLoader {\n  constructor() {\n    this.nextId = 0;\n    this.cardDataCache = {};\n  }\n\n  async getCardData(cardName, set = '') {\n    const newCard = {\n      name: cardName,\n      set: set,\n      id: this.nextId,\n    };\n    this.nextId++;   \n\n    if (!this.cardDataCache[cardName]) {\n      this.cardDataCache[cardName] = {};\n    }\n\n    if (!this.cardDataCache[cardName][set]) {\n      this.cardDataCache[cardName][set] = await this.getScryfallCardData(cardName, set);\n    }\n\n    newCard.data = this.cardDataCache[cardName][set];\n    return newCard;\n  }\n\n  async getScryfallCardData(cardName, set = '') {\n    const url = `https://api.scryfall.com/cards/named?exact=${encodeURI(cardName)}&set=${set}`;\n    const response = await fetch(url);\n    var cardJson = await response.json();\n\n    try {\n      // If double-faced card, some of the fields we need will be on the faces instead.\n      // Add all the fields from the front face to the top-level object.\n      if ('card_faces' in cardJson) {\n        Object.assign(cardJson, cardJson['card_faces'][0]);\n      }\n\n      var colors = cardJson['colors'].join('');\n      var color_pile = colors;\n      if (color_pile.length > 1) {\n        color_pile = 'M' // multicolor\n      } else if (color_pile.length === 0) {\n        colors = color_pile = 'C' // colorless\n      }\n\n      if (cardJson['type_line'].includes('Land')) {\n        color_pile = 'L';\n      }\n      \n      return {\n        color_pile,\n        colors,\n        cmc: cardJson['cmc'],\n        imageURL: cardJson['image_uris']['normal']\n      }\n    } catch (e) {\n      console.error(`Error parsing card data: ${e}. Card JSON: ${JSON.stringify(cardJson)}`);\n      return {\n        color_pile : 'C',\n        colors: 'C',\n        cmc: 0,\n        imageURL: `https://api.scryfall.com/cards/named?format=image&exact=${cardName}`\n      }\n    }\n  }\n}","import React from 'react';\nimport Modal from 'react-modal';\n\n\nexport default class SampleHandModalButton extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      showModal: false\n    };\n\n    this.handleOpenModal = () => {this.setState({showModal: true})};\n    this.handleCloseModal = () => {this.setState({showModal: false})};\n  }\n\n  render () {\n    return (\n      <>\n        <button onClick={this.handleOpenModal}>Sample Hand</button>\n        <Modal\n           isOpen={this.state.showModal}\n           onRequestClose={this.handleCloseModal}\n           contentLabel=\"Sample Hand\"\n           style={{\n             overlay: {zIndex: 1000}\n           }}\n        >\n        <SampleHandModalContent maindeckBoardState={this.props.maindeckBoardState} />\n        <p>(ESC or click outside to close)</p>\n        </Modal>\n      </>\n    );\n  }\n}\n\nconst HAND_SIZE = 7;\n\n/**\n * Copied from https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n * Shuffles array in place. ES6 version\n * @param {Array} a items An array containing the items.\n */\nfunction shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nconst IMG_WIDTH = 146;\nconst IMG_HEIGHT = 204;\n\nclass SampleHandModalContent extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = this.getNewHandState();\n  }\n\n  getNewHandState() {\n    const shuffledDeck = shuffle(this.props.maindeckBoardState.getCards());\n    const hand = []\n\n    const numCardsToDraw = Math.min(HAND_SIZE, shuffledDeck.length);\n    for (var _ of Array(numCardsToDraw)) {\n      hand.push(shuffledDeck.pop());\n    }\n\n    return {shuffledDeck, hand}\n  }\n\n  drawCard() {\n    if (this.state.shuffledDeck.length > 0) {\n      this.state.hand.push(this.state.shuffledDeck.pop());\n      this.setState({});\n    }\n  }\n\n  render () {\n    const cardImageURLs = this.state.hand.map(card => card.data.imageURL);\n    const images = cardImageURLs.map(url => <img src={url} width={IMG_WIDTH} height={IMG_HEIGHT} />);\n\n    return (\n      <>\n        <button onClick={() => this.drawCard()}>Draw card</button>\n        <button onClick={() => this.setState(this.getNewHandState())}>New hand</button>\n        <div>\n          {images}\n        </div>\n      </>\n    );\n  }\n}","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DndProvider } from 'react-dnd-multi-backend';\nimport HTML5toTouch from 'react-dnd-multi-backend/dist/esm/HTML5toTouch';\nimport { useDrag, useDrop } from 'react-dnd'\nimport './index.css';\nimport BoardState from './boardState.js';\nimport { CardPoolInput, LoadInputButton, ExportButton, SaveLinkButton, parseCardPoolText } from './importExport.js';\nimport { LandAdder } from './landAdder.js';\nimport CardLoader from './cardLoader.js';\nimport SampleHandModalButton from './sampleHand.js';\n\nconst IMG_WIDTH = 146;\nconst IMG_HEIGHT = 204;\nconst COL_WIDTH = IMG_WIDTH + 1;\nconst CARD_STACKING_OFFSET = 25;\nconst NUM_COLS = 8; // TODO: make this consistent with css width\nconst DEFAULT_INITIAL_CARDS = ['Battle Hymn', 'Reaper King', 'Death or Glory', 'Mindless Automaton',\n                               'Wizard Mentor', 'Crow Storm', \"Gaea's Touch\"].join(\"\\n\");\n\n// Card react component - displays a single draggable card. If you hover over the normal card image, \n// also displays a larger version next to it.\nfunction Card(props) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: \"Card\", card: props.card },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const imageURL = props.card.data ? props.card.data.imageURL : ''\n\n  const [hoverVisible, setHoverVisible] = useState(false);\n  const hoverVisibility = (hoverVisible && !isDragging) ? 'visible' : 'hidden';\n\n  return (\n    [\n      // The normal version of the card.\n      <img\n        ref={drag}\n        src={imageURL} width={IMG_WIDTH} height={IMG_HEIGHT}\n        onClick={() => props.moveCardToOtherBoard(props.card)}\n        // We use onMouseMove here instead of onMouseOver because apparently onMouseOver will fire after\n        // you drag and drop the top card of a stack, leading to weird behavior.\n        onMouseMove={(e) => !hoverVisible && setHoverVisible(true)}\n        onMouseLeave={() => setHoverVisible(false)}\n        style={{\n          position: \"absolute\",\n          top: `${props.top}px`,\n          left: `${props.left}px`,\n          zIndex: `${props.zIndex}`,\n        }} />,\n      // The larger \"preview\" image - only visible when hovering over the normal version of the card.\n      <img\n        src={imageURL} width={IMG_WIDTH * 2} height={IMG_HEIGHT * 2}\n        style={{\n          visibility: hoverVisibility,\n          position: \"absolute\",\n          top: `${props.top}px`,\n          left: `${props.left + IMG_WIDTH}px`,\n          zIndex: 999\n        }}\n      />,\n    ]\n  );\n}\n\n// Board react component - the space that all the cards are in\nfunction Board(props) {\n  const [{ mousePos }, drop] = useDrop({\n    accept: \"Card\",\n    drop: (item, monitor) => dropCard(props.boardState, monitor.getClientOffset(), item.card),\n    collect: monitor => ({\n      mousePos: monitor.getClientOffset(),\n    }),\n  })\n\n  const cardImages = [];\n  const cardColumns = props.boardState.cardColumns;\n  for (var col = 0; col < cardColumns.length; col++) {\n    for (var i = 0; i < cardColumns[col].length; i++) {\n      const card = cardColumns[col][i]\n      const topOffset = CARD_STACKING_OFFSET * i;\n      const leftOffset = COL_WIDTH * col;\n\n      cardImages.push(<Card\n        key={card.id.toString()}\n        card={card}\n        top={topOffset}\n        left={leftOffset}\n        zIndex={i}\n        moveCardToOtherBoard={props.moveCardToOtherBoard}\n      />);\n    }\n  }\n\n  const widthPx = COL_WIDTH * props.boardState.numCols;\n  return (\n    <div ref={drop} className=\"card-space\" style={{position: \"relative\", width: `${widthPx}px`}}>\n      {cardImages}\n      <div style={{position: \"absolute\", bottom: \"5px\", right: \"5px\"}}>{props.boardState.numCards()} cards</div>\n    </div>\n  );\n}\n\n// Helper used by Board\nconst dropCard = (boardState, clientOffset, card) => {\n  const newCol = Math.min(Math.floor(clientOffset.x / COL_WIDTH), boardState.numCols - 1);\n  const newIndexInCol = Math.floor(clientOffset.y / CARD_STACKING_OFFSET);\n\n  boardState.moveCard(card, newCol, newIndexInCol);\n}\n\n// Sort components\nfunction SortByCmcButton (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => props.topLevelContainer.setState({boardState: props.topLevelContainer.state.boardState.sortByCmc()})}\n      value=\"Sort by CMC\" />\n  );\n}\n\nfunction SortByColorButton (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => props.topLevelContainer.setState({boardState: props.topLevelContainer.state.boardState.sortByColor()})}\n      value=\"Sort by Color\" />\n  );\n}\n\n// Instructions component\nfunction Instructions (props) {\n  return (\n    <div  style={{float: 'right'}}>\n      Large space is the maindeck, smaller space is the sideboard. <br />\n      Drag and drop to move cards around. <br />\n      Click a card to move it from the maindeck to sideboard or vice versa. <br />\n      Multiple formats are supported for \"Load cards\", including MTG Arena. <br />\n      Valid example lines: <br />\n      Wizard Mentor <br />\n      1 Battle Hymn <br />\n      5 Forest <br />\n      1 Cogwork Assembler (AER) 145 <br />\n      1 Songs of the Damned (ME2)\n    </div>\n  );\n}\n\nconst initialCards = () => {\n  const encodedCardsFromParams = new URLSearchParams(window.location.search).get(\"cards\");\n  return encodedCardsFromParams ? window.atob(encodedCardsFromParams) : DEFAULT_INITIAL_CARDS\n}\n\n// Top-level container component to put everything together\nclass TopLevelContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const cardLoader = new CardLoader();\n    const [maindeckCardEntries, sideboardCardEntries] = parseCardPoolText(initialCards());\n    this.state = {\n      cardLoader: cardLoader,\n      boardState: new BoardState(cardLoader, maindeckCardEntries, NUM_COLS, this),\n      sideboardState: new BoardState(cardLoader, sideboardCardEntries, 1, this),\n    };\n  }\n  \n  moveCardToOtherBoard(card, board, otherBoard) {\n    board.removeCard(card);\n    otherBoard.addCard(card);\n    // Hacky way to force everything to re-render; TODO: make board states immutable and directly set the state with new versions\n    this.setState({});\n  }\n\n  async addLand(landName, count, set='') {\n    const currentBoard = this.state.boardState;\n    const cardLoader = this.state.cardLoader;\n    for (var _ of Array(count)) {\n      const card = await cardLoader.getCardData(landName, set)\n      currentBoard.addCard(card)\n    }\n\n    this.setState({});\n  }\n\n  render() {\n    const CARD_POOL_INPUT_ELEMENT_ID = 'card-pool-input';\n    const moveCardToSideboard = (card) => {\n      this.moveCardToOtherBoard(card, this.state.boardState, this.state.sideboardState);\n    }\n    const moveCardToMainboard = (card) => {\n      this.moveCardToOtherBoard(card, this.state.sideboardState, this.state.boardState);\n    }\n\n    return (\n      <div>\n        <Board boardState={this.state.boardState} moveCardToOtherBoard={moveCardToSideboard} />\n        <Board boardState={this.state.sideboardState} moveCardToOtherBoard={moveCardToMainboard} />\n        <CardPoolInput id={CARD_POOL_INPUT_ELEMENT_ID} initialText={initialCards()} />\n        <LoadInputButton inputElementId={CARD_POOL_INPUT_ELEMENT_ID} topLevelContainer={this} />\n        <SortByCmcButton topLevelContainer={this} />\n        <SortByColorButton topLevelContainer={this} />\n        <ExportButton boardState={this.state.boardState} sideboardState={this.state.sideboardState} />\n        <SaveLinkButton boardState={this.state.boardState} sideboardState={this.state.sideboardState} />\n        <SampleHandModalButton maindeckBoardState={this.state.boardState} />\n        <LandAdder addLand={(land, count, set) => this.addLand(land, count, set)}/>\n        <Instructions />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <DndProvider options={HTML5toTouch}>\n    <TopLevelContainer />\n  </DndProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}