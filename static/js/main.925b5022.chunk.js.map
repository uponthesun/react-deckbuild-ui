{"version":3,"sources":["index.js"],"names":["INITIAL_CARD_NAMES","getCardData","cardName","a","url","encodeURI","fetch","response","json","cardJson","color_pile","join","length","cmc","BoardState","cardNames","this","loadCardPool","cardColumns","Array","map","_","nextId","forEach","c","addCard","newCard","name","id","push","then","data","newCol","newIndexInCol","cardToMove","col","cardCol","i","splice","Math","min","newCardColumns","flat","card","Card","props","useDrag","item","type","drag","imageURL","ref","src","width","height","style","position","top","left","zIndex","Board","useDrop","accept","drop","monitor","dropCard","boardState","getClientOffset","collect","mousePos","cardImages","topOffset","leftOffset","IMG_WIDTH","key","toString","className","clientOffset","floor","x","NUM_COLS","y","moveCard","CardPoolInput","rows","cols","LoadInputButton","document","getElementById","value","split","line","trim","topLevelContainer","setState","onClick","load","React","Component","SortByCmcButton","sortByCmc","TopLevelContainer","state","ReactDOM","render","backend","Backend"],"mappings":"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","file":"static/js/main.925b5022.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Backend from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { useDrag, useDrop } from 'react-dnd'\n\nconst IMG_WIDTH = 146;\nconst IMG_HEIGHT = 204;\nconst COL_WIDTH = IMG_WIDTH + 1;\nconst CARD_STACKING_OFFSET = 25;\nconst NUM_COLS = 8; // TODO: make this consistent with css width\nconst INITIAL_CARD_NAMES = ['Battle Hymn', 'Reaper King', 'Death or Glory', 'Mindless Automaton',\n                            'Wizard Mentor', 'Crow Storm', \"Gaea's Touch\"];\n\nconst getCardData = async (cardName) => {\n  const url = `https://api.scryfall.com/cards/named?exact=${encodeURI(cardName)}`;\n  const response = await fetch(url);\n  const cardJson = await response.json();\n\n  var color_pile = cardJson['color_identity'].join('');\n  if (color_pile.length > 1) {\n    color_pile = 'M' // multicolor\n  } else if (color_pile.length === 0) {\n    color_pile = 'C' // colorless\n  }\n\n  return {\n    color_pile,\n    cmc: cardJson['cmc'],\n  }\n}\n\nclass BoardState {\n  constructor(cardNames) {\n    if (!cardNames) {\n      cardNames = [];\n    }\n    this.loadCardPool(cardNames);\n  }\n\n  async loadCardPool(cardNames) {\n    this.cardColumns = [...Array(NUM_COLS)].map(_ => []); // Initialize with NUM_COLS empty arrays\n    this.nextId = 0;\n    cardNames.forEach(c => this.addCard(c));\n  }\n\n  async addCard(cardName) {\n    const newCard = {\n      name: cardName,\n      id: this.nextId,\n    };\n    this.cardColumns[0].push(newCard);\n    this.nextId++; // TODO: Do we need to worry about concurrency? I don't think so but not positive\n\n    getCardData(cardName).then(data => newCard.data = data);\n  }\n\n  moveCard(id, newCol, newIndexInCol) {\n    // remove card from current position\n    // TODO: could consider storing mapping of id to position to avoid for loop lookup\n    var cardToMove;\n    for (var col = 0; col < this.cardColumns.length; col++) {\n      const cardCol = this.cardColumns[col];\n      for (var i = 0; i < cardCol.length; i++) {\n        if (cardCol[i].id === id) {\n          cardToMove = cardCol[i];\n          cardCol.splice(i, 1);\n        }\n      }\n    }\n\n    // add card to new position\n    newIndexInCol = Math.min(newIndexInCol, this.cardColumns[newCol].length);\n    this.cardColumns[newCol].splice(newIndexInCol, 0, cardToMove);\n  }\n\n  sortByCmc() {\n    const newCardColumns = [...Array(NUM_COLS)].map(_ => []);\n\n    for (var card of this.cardColumns.flat()) {\n      const col = Math.min(card.data.cmc, 7); // everything CMC 7 and up goes in one pile\n      newCardColumns[col].push(card);\n    }\n\n    this.cardColumns = newCardColumns;\n    return this;\n  }\n}\n\n// Card react component - displays a single draggable card\nfunction Card(props) {\n  const [_, drag] = useDrag({\n    item: { type: \"Card\", card: props.card },\n  });\n\n  const imageURL = `https://api.scryfall.com/cards/named?format=image&exact=${encodeURI(props.card.name)}`;\n  return (\n    <img\n      ref={drag}\n      src={imageURL} width={IMG_WIDTH} height={IMG_HEIGHT}\n      style={{\n        position: \"absolute\",\n        top: `${props.top}px`,\n        left: `${props.left}px`,\n        zIndex: `${props.zIndex}`,\n      }} />\n  );\n}\n\n// Board react component - the space that all the cards are in\nfunction Board(props) {\n  const [{ mousePos }, drop] = useDrop({\n    accept: \"Card\",\n    drop: (item, monitor) => dropCard(props.boardState, monitor.getClientOffset(), item.card),\n    collect: monitor => ({\n      mousePos: monitor.getClientOffset(),\n    }),\n  })\n\n  const cardImages = [];\n  const cardColumns = props.boardState.cardColumns;\n  for (var col = 0; col < cardColumns.length; col++) {\n    for (var i = 0; i < cardColumns[col].length; i++) {\n      const card = cardColumns[col][i]\n      const topOffset = CARD_STACKING_OFFSET * i;\n      const leftOffset = COL_WIDTH * col;\n\n      cardImages.push(<Card key={card.id.toString()} card={card} top={topOffset} left={leftOffset} zIndex={i} />);\n    }\n  }\n\n  return (\n    <div ref={drop} className=\"card-space\" style={{position: \"relative\"}}>\n      {cardImages}\n    </div>\n  );\n}\n\n// Helper used by Board\nconst dropCard = (boardState, clientOffset, card) => {\n  const newCol = Math.min(Math.floor(clientOffset.x / COL_WIDTH), NUM_COLS - 1);\n  const newIndexInCol = Math.floor(clientOffset.y / CARD_STACKING_OFFSET);\n\n  boardState.moveCard(card.id, newCol, newIndexInCol);\n}\n\n// Card pool input components\nconst CARD_POOL_INPUT_ELEMENT_ID='card-pool-input'\nfunction CardPoolInput(props) {\n  return (\n    <textarea id={props.id} rows=\"5\" cols=\"33\"></textarea>\n  );\n}\n\nclass LoadInputButton extends React.Component {\n  load() {\n    const rawInput = document.getElementById(CARD_POOL_INPUT_ELEMENT_ID).value;\n    const cardNames = rawInput.split(\"\\n\").map(line => line.trim());\n    this.props.topLevelContainer.setState({boardState: new BoardState(cardNames)});\n  }\n\n  render() {\n    return (\n      <input type=\"button\" onClick={() => this.load()} value=\"Load cards\" />\n    );\n  }\n}\n\n// Sort components\nfunction SortByCmcButton (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => props.topLevelContainer.setState({boardState: props.boardState.sortByCmc()})}\n      value=\"Sort by CMC\" />\n  );\n}\n\n// Top-level container component to put everything together\nclass TopLevelContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      boardState: new BoardState(INITIAL_CARD_NAMES),\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Board boardState={this.state.boardState} />\n        <CardPoolInput id={CARD_POOL_INPUT_ELEMENT_ID} />\n        <br />\n        <LoadInputButton topLevelContainer={this} />\n        <SortByCmcButton topLevelContainer={this} boardState={this.state.boardState} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <DndProvider backend={Backend}>\n    <TopLevelContainer />\n  </DndProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}