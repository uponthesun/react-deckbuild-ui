{"version":3,"sources":["boardState.js","importExport.js","landAdder.js","cardLoader.js","index.js"],"names":["BoardState","cardLoader","cardNames","numCols","this","loadCardPool","cardColumns","Array","map","_","forEach","c","createAndAddCard","cardName","newCard","getCardData","currentBoard","push","card","newCol","newIndexInCol","undefined","length","splice","col","cardCol","i","id","JSON","stringify","removeCard","addCard","flat","newCardColumns","Math","min","data","cmc","colorColumns","monocolorCards","filter","color_pile","multicolorCards","sort","c1","c2","colors","localeCompare","indexOf","CardPoolInput","props","rows","cols","LoadInputButton","rawInput","text","lines","split","l","trim","maindeckCardNames","sideboardCardNames","currentSection","line","includes","quantity","Number","isNaN","quantityPart","substring","endsWith","slice","n","document","getElementById","inputElementId","value","inputToCardNames","topLevelContainer","state","boardState","setState","sideboardState","type","onClick","load","React","Component","ExportButton","maindeck","sideboard","output","name","join","navigator","clipboard","writeText","then","alert","LandAdder","selectorId","inputCountId","max","placeholder","land","count","parseInt","addLand","CardLoader","nextId","getCardDataAsync","url","encodeURI","fetch","response","json","cardJson","Object","assign","console","error","INITIAL_CARD_NAMES","Card","useDrag","item","collect","monitor","isDragging","drag","imageURL","useState","hoverVisible","setHoverVisible","hoverVisibility","ref","src","width","height","onDoubleClick","moveCardToOtherBoard","onMouseMove","e","onMouseLeave","style","position","top","left","zIndex","IMG_WIDTH","IMG_HEIGHT","visibility","Board","useDrop","accept","drop","dropCard","getClientOffset","mousePos","cardImages","topOffset","leftOffset","key","toString","widthPx","className","bottom","right","numCards","clientOffset","floor","x","y","moveCard","SortByCmcButton","sortByCmc","SortByColorButton","sortByColor","Instructions","float","TopLevelContainer","board","otherBoard","landName","fill","ReactDOM","render","DndProvider","backend","Backend"],"mappings":"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","file":"static/js/main.eba9d914.chunk.js","sourcesContent":["// Manages state of a \"board\". Purely a logical representation, doesn't know about React components.\nexport default class BoardState {\n  constructor(cardLoader, cardNames, numCols) {\n    this.cardLoader = cardLoader;\n    if (!cardNames) {\n      cardNames = [];\n    }\n    this.numCols = numCols;\n    this.loadCardPool(cardNames);\n  }\n\n  async loadCardPool(cardNames) {\n    this.cardColumns = [...Array(this.numCols)].map(_ => []); // Initialize with numCols empty arrays\n    cardNames.forEach(c => this.createAndAddCard(c));\n  }\n\n  // Creates a new card object, including initializing it with Scryfall data and a unique ID,\n  // and adds it to this board.\n  async createAndAddCard(cardName) {\n    const newCard = this.cardLoader.getCardData(cardName);\n    newCard.currentBoard = this;\n    this.cardColumns[0].push(newCard);\n\n    return newCard;\n  }\n\n  // Adds the given card object to this board. Does not create a new card object.\n  // Can optionally specify where the new card should be inserted (defaults to bottom of first column).\n  addCard(card, newCol = 0, newIndexInCol = undefined) {\n    if (!newIndexInCol || newIndexInCol > this.cardColumns[newCol].length) {\n      newIndexInCol = this.cardColumns[newCol].length;\n    }\n\n    this.cardColumns[newCol].splice(newIndexInCol, 0, card);\n    card.currentBoard = this;\n  }\n\n  // Removes the given card from this board and returns it.\n  removeCard(card) {\n    // TODO: could consider storing mapping of id to position to avoid for loop lookup\n    for (var col = 0; col < this.cardColumns.length; col++) {\n      const cardCol = this.cardColumns[col];\n      for (var i = 0; i < cardCol.length; i++) {\n        if (cardCol[i].id === card.id) {\n          cardCol.splice(i, 1);\n          return card;\n        }\n      }\n    }\n\n    throw \"Tried to remove card, but it wasn't in this board: \" + JSON.stringify(card);\n  }\n\n  // Moves a card into the specified position in this board. If it was in a different board previously,\n  // first removes it from that board.\n  async moveCard(card, newCol, newIndexInCol) {\n    card.currentBoard.removeCard(card);\n    this.addCard(card, newCol, newIndexInCol);\n  }\n\n  numCards() {\n    return this.cardColumns.flat().length;\n  }\n\n  sortByCmc() {\n    const newCardColumns = [...Array(this.numCols)].map(_ => []);\n\n    for (var card of this.cardColumns.flat()) {\n      const col = Math.min(card.data.cmc, 7); // everything CMC 7 and up goes in one pile\n      newCardColumns[col].push(card);\n    }\n\n    this.cardColumns = newCardColumns;\n    return this;\n  }\n\n  sortByColor() {\n    const newCardColumns = [...Array(this.numCols)].map(_ => []);\n\n    const colorColumns = ['L', 'W', 'U', 'B', 'R', 'G', 'C', 'M'];\n\n    const monocolorCards = this.cardColumns.flat().filter(c => c.data.color_pile !== 'M');\n    const multicolorCards = this.cardColumns.flat().filter(c => c.data.color_pile === 'M');\n    multicolorCards.sort((c1, c2) => c1.data.colors.localeCompare(c2.data.colors));\n\n    for (var card of [...monocolorCards, ...multicolorCards]) {\n      const col = colorColumns.indexOf(card.data.color_pile);\n      newCardColumns[col].push(card);\n    }\n\n    this.cardColumns = newCardColumns;\n    return this;\n  }\n}\n\n","// This file contains components and logic related to importing and exporting from text formats.\n\nimport React from 'react';\nimport BoardState from './boardState.js';\n\n// Card pool input components\nconst CardPoolInput = function (props) {\n  return (\n    <textarea id={props.id} rows=\"5\" cols=\"33\"></textarea>\n  );\n}\n\nconst isNumber = (text) => {\n  return !Number.isNaN(Number(text));\n}\n\nclass LoadInputButton extends React.Component {\n  inputToCardNames(rawInput) {\n    const lines = rawInput.split(\"\\n\").filter(l => l.trim().length > 0);\n    const [maindeckCardNames, sideboardCardNames] = [[], []];\n    var currentSection = maindeckCardNames;\n\n    for (var line of lines) {\n      if (line.includes('Sideboard')) {\n        currentSection = sideboardCardNames;\n        continue;\n      }\n\n      // MTG Arena text format has the set name in () after the card name. Remove that portion if present.\n      line = line.split('(')[0].trim();\n\n      var quantity = 1;\n      // If the line starts with a number, consume that part of the string and store in quantity\n      if (isNumber(line[0])) {\n        const i = line.indexOf(' ');\n        var quantityPart = line.substring(0, i)\n        if (quantityPart.endsWith('x')) {\n          quantityPart = quantityPart.slice(0, -1); // trim off \"x\" in the case of \"1x <cardname>\"\n        }\n        quantity = Number(quantityPart);\n        line = line.substring(i).trim();\n      }\n\n      // The remaining portion of the string should be just the card name; add it n times\n      for (var n = 0; n < quantity; n++) {\n        currentSection.push(line);\n      }\n    }\n\n    return [maindeckCardNames, sideboardCardNames];\n  }\n\n  load() {\n    const rawInput = document.getElementById(this.props.inputElementId).value;\n    const [maindeckCardNames, sideboardCardNames] = this.inputToCardNames(rawInput);\n\n    const numCols = this.props.topLevelContainer.state.boardState.numCols;\n    const cardLoader = this.props.topLevelContainer.state.cardLoader;\n    this.props.topLevelContainer.setState({\n      boardState: new BoardState(cardLoader, maindeckCardNames, numCols),\n      sideboardState: new BoardState(cardLoader, sideboardCardNames, 1)\n    });\n  }\n\n  render() {\n    return (\n      <input type=\"button\" onClick={() => this.load()} value=\"Load cards\" />\n    );\n  }\n}\n\n// Export button components\nconst toCockatriceFormat = (maindeck, sideboard) => {\n  return maindeck.map(c => c.name).join(\"\\n\") +\n    \"\\n\\n// Sideboard\\n\" +\n    sideboard.map(c => c.name).join(\"\\n\");\n}\n\nconst writeToClipboardAndAlert = (text) => {\n  navigator.clipboard.writeText(text)\n    .then(() => alert(`Copied to clipboard:\\n\\n${text}`),\n      () => alert(`Failed to copy to clipboard`));\n}\n\nconst ExportButton = function (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => {\n        const output = toCockatriceFormat(props.boardState.cardColumns.flat(), props.sideboardState.cardColumns.flat());\n        writeToClipboardAndAlert(output);\n      }}\n      value=\"Export to Cockatrice\" />\n  );\n}\n\nexport {\n  CardPoolInput,\n  LoadInputButton,\n  ExportButton,\n};","// This file contains a component for adding basic lands to the deck.\n\nimport React from 'react';\n\nfunction LandAdder(props) {\n  const selectorId = props.id + '-selector';\n  const inputCountId = props.id + '-input-count';\n\n  return (\n    <div>\n      <select id={selectorId}>\n        <option value='Snow-Covered Plains'>Snow-Covered Plains</option>\n        <option value='Snow-Covered Island'>Snow-Covered Island</option>\n        <option value='Snow-Covered Swamp'>Snow-Covered Swamp</option>\n        <option value='Snow-Covered Mountain'>Snow-Covered Mountain</option>\n        <option value='Snow-Covered Forest'>Snow-Covered Forest</option>\n      </select>\n      <input type='number'\n        min='0'\n        max='20'\n        placeholder='1'\n        id={inputCountId}\n      />\n      <input type='button'\n        onClick={() => {\n          const land = document.getElementById(selectorId).value;\n          const count = parseInt(document.getElementById(inputCountId).value) || 1;\n          props.addLand(land, count)\n        }}\n        value='Add Basic Lands'\n      />\n    </div>\n  );\n}\n\nexport {\n  LandAdder,\n};","// This file contains logic for loading card data from Scryfall\nexport default class CardLoader {\n  constructor() {\n    this.nextId = 0;\n  }\n  \n  getCardData(cardName) {\n    const newCard = {\n      name: cardName,\n      id: this.nextId,\n    };\n    this.nextId++;   \n    this.getCardDataAsync(cardName).then(data => newCard.data = data);\n    return newCard;\n  }\n  \n  async getCardDataAsync(cardName) {\n    const url = `https://api.scryfall.com/cards/named?exact=${encodeURI(cardName)}`;\n    const response = await fetch(url);\n    var cardJson = await response.json();\n\n    try {\n      // If double-faced card, some of the fields we need will be on the faces instead.\n      // Add all the fields from the front face to the top-level object.\n      if ('card_faces' in cardJson) {\n        Object.assign(cardJson, cardJson['card_faces'][0]);\n      }\n\n      var colors = cardJson['colors'].join('');\n      var color_pile = colors;\n      if (color_pile.length > 1) {\n        color_pile = 'M' // multicolor\n      } else if (color_pile.length === 0) {\n        colors = color_pile = 'C' // colorless\n      }\n\n      if (cardJson['type_line'].includes('Land')) {\n        color_pile = 'L';\n      }\n      \n      return {\n        color_pile,\n        colors,\n        cmc: cardJson['cmc'],\n      }\n    } catch (e) {\n      console.error(`Error parsing card data: ${e}. Card JSON: ${JSON.stringify(cardJson)}`);\n      throw e;\n    }\n  }\n}","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Backend from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { useDrag, useDrop } from 'react-dnd'\nimport './index.css';\nimport BoardState from './boardState.js';\nimport { CardPoolInput, LoadInputButton, ExportButton } from './importExport.js';\nimport { LandAdder } from './landAdder.js';\nimport CardLoader from './cardLoader.js';\n\nconst IMG_WIDTH = 146;\nconst IMG_HEIGHT = 204;\nconst COL_WIDTH = IMG_WIDTH + 1;\nconst CARD_STACKING_OFFSET = 25;\nconst NUM_COLS = 8; // TODO: make this consistent with css width\nconst INITIAL_CARD_NAMES = ['Battle Hymn', 'Reaper King', 'Death or Glory', 'Mindless Automaton',\n                            'Wizard Mentor', 'Crow Storm', \"Gaea's Touch\"];\n\n// Card react component - displays a single draggable card. If you hover over the normal card image, \n// also displays a larger version next to it.\nfunction Card(props) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: \"Card\", card: props.card },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const imageURL = `https://api.scryfall.com/cards/named?format=image&exact=${encodeURI(props.card.name)}`;\n\n  const [hoverVisible, setHoverVisible] = useState(false);\n  const hoverVisibility = (hoverVisible && !isDragging) ? 'visible' : 'hidden';\n\n  return (\n    [\n      // The normal version of the card.\n      <img\n        ref={drag}\n        src={imageURL} width={IMG_WIDTH} height={IMG_HEIGHT}\n        onDoubleClick={() => props.moveCardToOtherBoard(props.card)}\n        // We use onMouseMove here instead of onMouseOver because apparently onMouseOver will fire after\n        // you drag and drop the top card of a stack, leading to weird behavior.\n        onMouseMove={(e) => !hoverVisible && setHoverVisible(true)}\n        onMouseLeave={() => setHoverVisible(false)}\n        style={{\n          position: \"absolute\",\n          top: `${props.top}px`,\n          left: `${props.left}px`,\n          zIndex: `${props.zIndex}`,\n        }} />,\n      // The larger \"preview\" image - only visible when hovering over the normal version of the card.\n      <img\n        src={imageURL} width={IMG_WIDTH * 2} height={IMG_HEIGHT * 2}\n        style={{\n          visibility: hoverVisibility,\n          position: \"absolute\",\n          top: `${props.top}px`,\n          left: `${props.left + IMG_WIDTH}px`,\n          zIndex: 999\n        }}\n      />,\n    ]\n  );\n}\n\n// Board react component - the space that all the cards are in\nfunction Board(props) {\n  const [{ mousePos }, drop] = useDrop({\n    accept: \"Card\",\n    drop: (item, monitor) => dropCard(props.boardState, monitor.getClientOffset(), item.card),\n    collect: monitor => ({\n      mousePos: monitor.getClientOffset(),\n    }),\n  })\n\n  const cardImages = [];\n  const cardColumns = props.boardState.cardColumns;\n  for (var col = 0; col < cardColumns.length; col++) {\n    for (var i = 0; i < cardColumns[col].length; i++) {\n      const card = cardColumns[col][i]\n      const topOffset = CARD_STACKING_OFFSET * i;\n      const leftOffset = COL_WIDTH * col;\n\n      cardImages.push(<Card\n        key={card.id.toString()}\n        card={card}\n        top={topOffset}\n        left={leftOffset}\n        zIndex={i}\n        moveCardToOtherBoard={props.moveCardToOtherBoard}\n      />);\n    }\n  }\n\n  const widthPx = COL_WIDTH * props.boardState.numCols;\n  return (\n    <div ref={drop} className=\"card-space\" style={{position: \"relative\", width: `${widthPx}px`}}>\n      {cardImages}\n      <div style={{position: \"absolute\", bottom: \"5px\", right: \"5px\"}}>{props.boardState.numCards()} cards</div>\n    </div>\n  );\n}\n\n// Helper used by Board\nconst dropCard = (boardState, clientOffset, card) => {\n  const newCol = Math.min(Math.floor(clientOffset.x / COL_WIDTH), boardState.numCols - 1);\n  const newIndexInCol = Math.floor(clientOffset.y / CARD_STACKING_OFFSET);\n\n  boardState.moveCard(card, newCol, newIndexInCol);\n}\n\n// Sort components\nfunction SortByCmcButton (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => props.topLevelContainer.setState({boardState: props.topLevelContainer.state.boardState.sortByCmc()})}\n      value=\"Sort by CMC\" />\n  );\n}\n\nfunction SortByColorButton (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => props.topLevelContainer.setState({boardState: props.topLevelContainer.state.boardState.sortByColor()})}\n      value=\"Sort by Color\" />\n  );\n}\n\n// Instructions component\nfunction Instructions (props) {\n  return (\n    <div  style={{float: 'right'}}>\n      Large space is the maindeck, smaller space is the sideboard. <br />\n      Drag and drop to move cards around. <br />\n      Double-click a card to move it from the maindeck to sideboard or vice versa. <br />\n      Multiple formats are supported for \"Load cards\", including MTG Arena. <br />\n      Valid example lines: <br />\n      Wizard Mentor <br />\n      1 Battle Hymn <br />\n      5 Forest <br />\n      1 Cogwork Assembler (AER) 145\n    </div>\n  );\n}\n\n// Top-level container component to put everything together\nclass TopLevelContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const cardLoader = new CardLoader();\n    this.state = {\n      cardLoader: cardLoader,\n      boardState: new BoardState(cardLoader, INITIAL_CARD_NAMES, NUM_COLS),\n      sideboardState: new BoardState(cardLoader, [], 1),\n    };\n  }\n  \n  moveCardToOtherBoard(card, board, otherBoard) {\n    board.removeCard(card);\n    otherBoard.addCard(card);\n    // Hacky way to force everything to re-render; TODO: make board states immutable and directly set the state with new versions\n    this.setState(this.state);\n  }\n\n  addLand(landName, count) {\n    const currentBoard = this.state.boardState;\n    const cardLoader = this.state.cardLoader;\n    Array(count).fill(null).forEach(function() {\n      const card = cardLoader.getCardData(landName)\n      currentBoard.addCard(card)\n    });\n    this.setState(this.state);\n  }\n\n  render() {\n    const CARD_POOL_INPUT_ELEMENT_ID = 'card-pool-input';\n    const moveCardToSideboard = (card) => {\n      this.moveCardToOtherBoard(card, this.state.boardState, this.state.sideboardState);\n    }\n    const moveCardToMainboard = (card) => {\n      this.moveCardToOtherBoard(card, this.state.sideboardState, this.state.boardState);\n    }\n    \n    return (\n      <div>\n        <Board boardState={this.state.boardState} moveCardToOtherBoard={moveCardToSideboard} />\n        <Board boardState={this.state.sideboardState} moveCardToOtherBoard={moveCardToMainboard} />\n        <CardPoolInput id={CARD_POOL_INPUT_ELEMENT_ID} />\n        <LoadInputButton inputElementId={CARD_POOL_INPUT_ELEMENT_ID} topLevelContainer={this} />\n        <SortByCmcButton topLevelContainer={this} />\n        <SortByColorButton topLevelContainer={this} />\n        <ExportButton boardState={this.state.boardState} sideboardState={this.state.sideboardState} />\n        <LandAdder addLand={(land, count) => this.addLand(land, count)}/>\n        <Instructions />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <DndProvider backend={Backend}>\n    <TopLevelContainer />\n  </DndProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}