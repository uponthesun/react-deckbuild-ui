{"version":3,"sources":["index.js"],"names":["INITIAL_CARD_NAMES","getCardData","cardName","a","url","encodeURI","fetch","response","json","cardJson","color_pile","join","length","cmc","BoardState","cardNames","numCols","this","loadCardPool","cardColumns","Array","map","_","nextId","forEach","c","addCard","newCard","name","id","currentBoard","push","then","data","card","newCol","newIndexInCol","removeFrom","col","cardCol","i","splice","Math","min","newCardColumns","flat","Card","props","useDrag","item","type","drag","imageURL","ref","src","width","height","style","position","top","left","zIndex","Board","useDrop","accept","drop","monitor","dropCard","boardState","getClientOffset","collect","mousePos","cardImages","topOffset","leftOffset","IMG_WIDTH","key","toString","widthPx","className","clientOffset","floor","x","y","moveCard","CardPoolInput","rows","cols","LoadInputButton","document","getElementById","value","split","line","trim","topLevelContainer","setState","onClick","load","React","Component","SortByCmcButton","sortByCmc","TopLevelContainer","state","sideboardState","ReactDOM","render","backend","Backend"],"mappings":"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","file":"static/js/main.69f5c5f1.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Backend from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { useDrag, useDrop } from 'react-dnd'\n\nconst IMG_WIDTH = 146;\nconst IMG_HEIGHT = 204;\nconst COL_WIDTH = IMG_WIDTH + 1;\nconst CARD_STACKING_OFFSET = 25;\nconst NUM_COLS = 8; // TODO: make this consistent with css width\nconst INITIAL_CARD_NAMES = ['Battle Hymn', 'Reaper King', 'Death or Glory', 'Mindless Automaton',\n                            'Wizard Mentor', 'Crow Storm', \"Gaea's Touch\"];\n\nconst getCardData = async (cardName) => {\n  const url = `https://api.scryfall.com/cards/named?exact=${encodeURI(cardName)}`;\n  const response = await fetch(url);\n  const cardJson = await response.json();\n\n  var color_pile = cardJson['color_identity'].join('');\n  if (color_pile.length > 1) {\n    color_pile = 'M' // multicolor\n  } else if (color_pile.length === 0) {\n    color_pile = 'C' // colorless\n  }\n\n  return {\n    color_pile,\n    cmc: cardJson['cmc'],\n  }\n}\n\nclass BoardState {\n  constructor(cardNames, numCols) {\n    if (!cardNames) {\n      cardNames = [];\n    }\n    this.numCols = numCols;\n    this.loadCardPool(cardNames);\n  }\n\n  async loadCardPool(cardNames) {\n    this.cardColumns = [...Array(this.numCols)].map(_ => []); // Initialize with numCols empty arrays\n    this.nextId = 0;\n    cardNames.forEach(c => this.addCard(c));\n  }\n\n  async addCard(cardName) {\n    const newCard = {\n      name: cardName,\n      id: this.nextId,\n      currentBoard: this,\n    };\n    this.cardColumns[0].push(newCard);\n    this.nextId++; // TODO: Do we need to worry about concurrency? I don't think so but not positive\n\n    getCardData(cardName).then(data => newCard.data = data);\n    return newCard;\n  }\n\n  async moveCard(card, newCol, newIndexInCol) {\n    // remove card from current position\n    // TODO: could consider storing mapping of id to position to avoid for loop lookup\n    //var cardToMove;\n    const removeFrom = card.currentBoard;\n    for (var col = 0; col < removeFrom.cardColumns.length; col++) {\n      const cardCol = removeFrom.cardColumns[col];\n      for (var i = 0; i < cardCol.length; i++) {\n        if (cardCol[i].id === card.id) {\n          //cardToMove = cardCol[i];\n          cardCol.splice(i, 1);\n        }\n      }\n    }\n\n    // add card to new position \n    newIndexInCol = Math.min(newIndexInCol, this.cardColumns[newCol].length);\n    this.cardColumns[newCol].splice(newIndexInCol, 0, card);\n    card.currentBoard = this;\n  }\n\n  sortByCmc() {\n    const newCardColumns = [...Array(this.numCols)].map(_ => []);\n\n    for (var card of this.cardColumns.flat()) {\n      const col = Math.min(card.data.cmc, 7); // everything CMC 7 and up goes in one pile\n      newCardColumns[col].push(card);\n    }\n\n    this.cardColumns = newCardColumns;\n    return this;\n  }\n}\n\n// Card react component - displays a single draggable card\nfunction Card(props) {\n  const [_, drag] = useDrag({\n    item: { type: \"Card\", card: props.card },\n  });\n\n  const imageURL = `https://api.scryfall.com/cards/named?format=image&exact=${encodeURI(props.card.name)}`;\n  return (\n    <img\n      ref={drag}\n      src={imageURL} width={IMG_WIDTH} height={IMG_HEIGHT}\n      style={{\n        position: \"absolute\",\n        top: `${props.top}px`,\n        left: `${props.left}px`,\n        zIndex: `${props.zIndex}`,\n      }} />\n  );\n}\n\n// Board react component - the space that all the cards are in\nfunction Board(props) {\n  const [{ mousePos }, drop] = useDrop({\n    accept: \"Card\",\n    drop: (item, monitor) => dropCard(props.boardState, monitor.getClientOffset(), item.card),\n    collect: monitor => ({\n      mousePos: monitor.getClientOffset(),\n    }),\n  })\n\n  const cardImages = [];\n  const cardColumns = props.boardState.cardColumns;\n  for (var col = 0; col < cardColumns.length; col++) {\n    for (var i = 0; i < cardColumns[col].length; i++) {\n      const card = cardColumns[col][i]\n      const topOffset = CARD_STACKING_OFFSET * i;\n      const leftOffset = COL_WIDTH * col;\n\n      cardImages.push(<Card key={card.id.toString()} card={card} top={topOffset} left={leftOffset} zIndex={i} />);\n    }\n  }\n\n  const widthPx = COL_WIDTH * props.boardState.numCols;\n  return (\n    <div ref={drop} className=\"card-space\" style={{position: \"relative\", width: `${widthPx}px`}}>\n      {cardImages}\n    </div>\n  );\n}\n\n// Helper used by Board\nconst dropCard = (boardState, clientOffset, card) => {\n  const newCol = Math.min(Math.floor(clientOffset.x / COL_WIDTH), boardState.numCols - 1);\n  const newIndexInCol = Math.floor(clientOffset.y / CARD_STACKING_OFFSET);\n\n  boardState.moveCard(card, newCol, newIndexInCol);\n}\n\n// Card pool input components\nconst CARD_POOL_INPUT_ELEMENT_ID='card-pool-input'\nfunction CardPoolInput(props) {\n  return (\n    <textarea id={props.id} rows=\"5\" cols=\"33\"></textarea>\n  );\n}\n\nclass LoadInputButton extends React.Component {\n  load() {\n    const rawInput = document.getElementById(CARD_POOL_INPUT_ELEMENT_ID).value;\n    const cardNames = rawInput.split(\"\\n\").map(line => line.trim());\n    this.props.topLevelContainer.setState({boardState: new BoardState(cardNames, NUM_COLS)});\n  }\n\n  render() {\n    return (\n      <input type=\"button\" onClick={() => this.load()} value=\"Load cards\" />\n    );\n  }\n}\n\n// Sort components\nfunction SortByCmcButton (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => props.topLevelContainer.setState({boardState: props.boardState.sortByCmc()})}\n      value=\"Sort by CMC\" />\n  );\n}\n\n// Top-level container component to put everything together\nclass TopLevelContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      boardState: new BoardState(INITIAL_CARD_NAMES, NUM_COLS),\n      sideboardState: new BoardState([], 1),\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Board boardState={this.state.boardState} />\n        <Board boardState={this.state.sideboardState} />\n        <CardPoolInput id={CARD_POOL_INPUT_ELEMENT_ID} />\n        <LoadInputButton topLevelContainer={this} />\n        <SortByCmcButton topLevelContainer={this} boardState={this.state.boardState} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <DndProvider backend={Backend}>\n    <TopLevelContainer />\n  </DndProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}