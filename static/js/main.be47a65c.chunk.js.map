{"version":3,"sources":["boardState.js","importExport.js","index.js"],"names":["BoardState","cardNames","numCols","this","loadCardPool","cardColumns","Array","map","_","nextId","forEach","c","addCard","cardName","newCard","name","id","currentBoard","push","getCardData","then","data","card","newCol","newIndexInCol","removeFrom","col","length","cardCol","i","splice","Math","min","newCardColumns","flat","cmc","a","url","encodeURI","fetch","response","json","cardJson","color_pile","join","CardPoolInput","props","rows","cols","LoadInputButton","document","getElementById","inputElementId","value","split","line","text","Number","isNaN","substring","indexOf","trim","filter","topLevelContainer","state","boardState","setState","sideboardState","type","onClick","load","React","Component","ExportButton","maindeck","sideboard","output","navigator","clipboard","writeText","alert","INITIAL_CARD_NAMES","Card","useDrag","item","drag","imageURL","ref","src","width","height","style","position","top","left","zIndex","Board","useDrop","accept","drop","monitor","dropCard","getClientOffset","collect","mousePos","cardImages","topOffset","leftOffset","IMG_WIDTH","key","toString","widthPx","className","clientOffset","floor","x","y","moveCard","SortByCmcButton","sortByCmc","TopLevelContainer","ReactDOM","render","DndProvider","backend","Backend"],"mappings":"kUACqBA,E,WACnB,WAAYC,EAAWC,GAAU,oBAC1BD,IACHA,EAAY,IAEdE,KAAKD,QAAUA,EACfC,KAAKC,aAAaH,G,kGAGDA,G,4EACjBE,KAAKE,YAAc,YAAIC,MAAMH,KAAKD,UAAUK,KAAI,SAAAC,GAAC,MAAI,MACrDL,KAAKM,OAAS,EACdR,EAAUS,SAAQ,SAAAC,GAAC,OAAI,EAAKC,QAAQD,M,8KAGxBE,G,8EACNC,EAAU,CACdC,KAAMF,EACNG,GAAIb,KAAKM,OACTQ,aAAcd,MAEhBA,KAAKE,YAAY,GAAGa,KAAKJ,GACzBX,KAAKM,SAELU,EAAYN,GAAUO,MAAK,SAAAC,GAAI,OAAIP,EAAQO,KAAOA,K,kBAC3CP,G,+KAGMQ,EAAMC,EAAQC,G,6EAK3B,IADMC,EAAaH,EAAKL,aACfS,EAAM,EAAGA,EAAMD,EAAWpB,YAAYsB,OAAQD,IAErD,IADME,EAAUH,EAAWpB,YAAYqB,GAC9BG,EAAI,EAAGA,EAAID,EAAQD,OAAQE,IAC9BD,EAAQC,GAAGb,KAAOM,EAAKN,IAEzBY,EAAQE,OAAOD,EAAG,GAMxBL,EAAgBO,KAAKC,IAAIR,EAAerB,KAAKE,YAAYkB,GAAQI,QACjExB,KAAKE,YAAYkB,GAAQO,OAAON,EAAe,EAAGF,GAClDA,EAAKL,aAAed,K,6IAIpB,IADU,EACJ8B,EAAiB,YAAI3B,MAAMH,KAAKD,UAAUK,KAAI,SAAAC,GAAC,MAAI,MAD/C,cAGOL,KAAKE,YAAY6B,QAHxB,IAGV,2BAA0C,CAAC,IAAlCZ,EAAiC,QAExCW,EADYF,KAAKC,IAAIV,EAAKD,KAAKc,IAAK,IAChBjB,KAAKI,IALjB,8BASV,OADAnB,KAAKE,YAAc4B,EACZ9B,S,KAILgB,EAAW,uCAAG,WAAON,GAAP,qBAAAuB,EAAA,6DACZC,EADY,qDACwCC,UAAUzB,IADlD,SAEK0B,MAAMF,GAFX,cAEZG,EAFY,gBAGKA,EAASC,OAHd,cAGZC,EAHY,QAKdC,EAAaD,EAAQ,eAAmBE,KAAK,KAClCjB,OAAS,EACtBgB,EAAa,IACkB,IAAtBA,EAAWhB,SACpBgB,EAAa,KATG,kBAYX,CACLA,aACAR,IAAKO,EAAQ,MAdG,4CAAH,sDCzDXG,EAAgB,SAAUC,GAC9B,OACE,8BAAU9B,GAAI8B,EAAM9B,GAAI+B,KAAK,IAAIC,KAAK,QAQpCC,E,qKAEF,IAEMhD,EAFWiD,SAASC,eAAehD,KAAK2C,MAAMM,gBAAgBC,MAEzCC,MAAM,MAAM/C,KAAI,SAACgD,GAR/B,IAACC,EAUZ,OAVYA,EASID,EAAK,IAArBA,EARIE,OAAOC,MAAMD,OAAOD,IAQuCD,EAApCA,EAAKI,UAAUJ,EAAKK,QAAQ,OAC3CC,UACXC,QAAO,SAAAP,GAAI,OAAIA,EAAKM,OAAOlC,OAAS,KAEjCzB,EAAUC,KAAK2C,MAAMiB,kBAAkBC,MAAMC,WAAW/D,QAC9DC,KAAK2C,MAAMiB,kBAAkBG,SAAS,CACpCD,WAAY,IAAIjE,EAAWC,EAAWC,GACtCiE,eAAgB,IAAInE,EAAW,GAAI,O,+BAI7B,IAAD,OACP,OACE,2BAAOoE,KAAK,SAASC,QAAS,kBAAM,EAAKC,QAAQjB,MAAM,mB,GAlB/BkB,IAAMC,WAoC9BC,EAAe,SAAU3B,GAC7B,OACE,2BAAOsB,KAAK,SACVC,QAAS,WACP,IAhBoBK,EAAUC,EAMJnB,EAUpBoB,GAhBcF,EAgBc5B,EAAMmB,WAAW5D,YAAY6B,OAhBjCyC,EAgByC7B,EAAMqB,eAAe9D,YAAY6B,OAfvGwC,EAASnE,KAAI,SAAAI,GAAC,OAAIA,EAAEI,QAAM6B,KAAK,MACpC,qBACA+B,EAAUpE,KAAI,SAAAI,GAAC,OAAIA,EAAEI,QAAM6B,KAAK,OAGFY,EAWDoB,EAV/BC,UAAUC,UAAUC,UAAUvB,GAC3BpC,MAAK,kBAAM4D,MAAM,2BAAD,OAA4BxB,OAC3C,kBAAMwB,MAAM,mCAUZ3B,MAAM,0BC7CN4B,EAAqB,CAAC,cAAe,cAAe,iBAAkB,qBAChD,gBAAiB,aAAc,gBAG3D,SAASC,EAAKpC,GAAQ,IAAD,EACDqC,YAAQ,CACxBC,KAAM,CAAEhB,KAAM,OAAQ9C,KAAMwB,EAAMxB,QAFjB,mBACT+D,GADS,WAKbC,EAAQ,kEAA8DhD,UAAUQ,EAAMxB,KAAKP,OACjG,OACE,yBACEwE,IAAKF,EACLG,IAAKF,EAAUG,MAlBH,IAkBqBC,OAjBpB,IAkBbC,MAAO,CACLC,SAAU,WACVC,IAAI,GAAD,OAAK/C,EAAM+C,IAAX,MACHC,KAAK,GAAD,OAAKhD,EAAMgD,KAAX,MACJC,OAAO,GAAD,OAAKjD,EAAMiD,WAMzB,SAASC,EAAMlD,GAWb,IAXqB,IAAD,EACSmD,YAAQ,CACnCC,OAAQ,OACRC,KAAM,SAACf,EAAMgB,GAAP,OAAmBC,EAASvD,EAAMmB,WAAYmC,EAAQE,kBAAmBlB,EAAK9D,OACpFiF,QAAS,SAAAH,GAAO,MAAK,CACnBI,SAAUJ,EAAQE,sBALF,mBACCH,GADD,KACXK,SADW,MASdC,EAAa,GACbpG,EAAcyC,EAAMmB,WAAW5D,YAC5BqB,EAAM,EAAGA,EAAMrB,EAAYsB,OAAQD,IAC1C,IAAK,IAAIG,EAAI,EAAGA,EAAIxB,EAAYqB,GAAKC,OAAQE,IAAK,CAChD,IAAMP,EAAOjB,EAAYqB,GAAKG,GACxB6E,EAxCiB,GAwCkB7E,EACnC8E,EA1CMC,IA0CmBlF,EAE/B+E,EAAWvF,KAAK,kBAACgE,EAAD,CAAM2B,IAAKvF,EAAKN,GAAG8F,WAAYxF,KAAMA,EAAMuE,IAAKa,EAAWZ,KAAMa,EAAYZ,OAAQlE,KAIzG,IAAMkF,EAhDUH,IAgDY9D,EAAMmB,WAAW/D,QAC7C,OACE,yBAAKqF,IAAKY,EAAMa,UAAU,aAAarB,MAAO,CAACC,SAAU,WAAYH,MAAM,GAAD,OAAKsB,EAAL,QACvEN,GAMP,IAAMJ,EAAW,SAACpC,EAAYgD,EAAc3F,GAC1C,IAAMC,EAASQ,KAAKC,IAAID,KAAKmF,MAAMD,EAAaE,EA1DhCP,KA0DgD3C,EAAW/D,QAAU,GAC/EsB,EAAgBO,KAAKmF,MAAMD,EAAaG,EA1DnB,IA4D3BnD,EAAWoD,SAAS/F,EAAMC,EAAQC,IAIpC,SAAS8F,EAAiBxE,GACxB,OACE,2BAAOsB,KAAK,SACVC,QAAS,kBAAMvB,EAAMiB,kBAAkBG,SAAS,CAACD,WAAYnB,EAAMiB,kBAAkBC,MAAMC,WAAWsD,eACtGlE,MAAM,gB,IAKNmE,E,kDACJ,WAAY1E,GAAQ,IAAD,8BACjB,cAAMA,IAEDkB,MAAQ,CACXC,WAAY,IAAIjE,EAAWiF,EA7EhB,GA8EXd,eAAgB,IAAInE,EAAW,GAAI,IALpB,E,qDAWjB,OACE,6BACE,kBAACgG,EAAD,CAAO/B,WAAY9D,KAAK6D,MAAMC,aAC9B,kBAAC+B,EAAD,CAAO/B,WAAY9D,KAAK6D,MAAMG,iBAC9B,kBAAC,EAAD,CAAenD,GALgB,oBAM/B,kBAAC,EAAD,CAAiBoC,eANc,kBAM8BW,kBAAmB5D,OAChF,kBAACmH,EAAD,CAAiBvD,kBAAmB5D,OACpC,kBAAC,EAAD,CAAc8D,WAAY9D,KAAK6D,MAAMC,WAAYE,eAAgBhE,KAAK6D,MAAMG,sB,GAnBpDI,IAAMC,WAyBtCiD,IAASC,OACP,kBAACC,EAAA,EAAD,CAAaC,QAASC,KACpB,kBAAC,EAAD,OAEF3E,SAASC,eAAe,W","file":"static/js/main.be47a65c.chunk.js","sourcesContent":["// Manages state of a \"board\". Purely a logical representation, doesn't know about React components.\nexport default class BoardState {\n  constructor(cardNames, numCols) {\n    if (!cardNames) {\n      cardNames = [];\n    }\n    this.numCols = numCols;\n    this.loadCardPool(cardNames);\n  }\n\n  async loadCardPool(cardNames) {\n    this.cardColumns = [...Array(this.numCols)].map(_ => []); // Initialize with numCols empty arrays\n    this.nextId = 0;\n    cardNames.forEach(c => this.addCard(c));\n  }\n\n  async addCard(cardName) {\n    const newCard = {\n      name: cardName,\n      id: this.nextId,\n      currentBoard: this,\n    };\n    this.cardColumns[0].push(newCard);\n    this.nextId++; // TODO: Do we need to worry about concurrency? I don't think so but not positive\n\n    getCardData(cardName).then(data => newCard.data = data);\n    return newCard;\n  }\n\n  async moveCard(card, newCol, newIndexInCol) {\n    // remove card from current position\n    // TODO: could consider storing mapping of id to position to avoid for loop lookup\n    //var cardToMove;\n    const removeFrom = card.currentBoard;\n    for (var col = 0; col < removeFrom.cardColumns.length; col++) {\n      const cardCol = removeFrom.cardColumns[col];\n      for (var i = 0; i < cardCol.length; i++) {\n        if (cardCol[i].id === card.id) {\n          //cardToMove = cardCol[i];\n          cardCol.splice(i, 1);\n        }\n      }\n    }\n\n    // add card to new position \n    newIndexInCol = Math.min(newIndexInCol, this.cardColumns[newCol].length);\n    this.cardColumns[newCol].splice(newIndexInCol, 0, card);\n    card.currentBoard = this;\n  }\n\n  sortByCmc() {\n    const newCardColumns = [...Array(this.numCols)].map(_ => []);\n\n    for (var card of this.cardColumns.flat()) {\n      const col = Math.min(card.data.cmc, 7); // everything CMC 7 and up goes in one pile\n      newCardColumns[col].push(card);\n    }\n\n    this.cardColumns = newCardColumns;\n    return this;\n  }\n}\n\nconst getCardData = async (cardName) => {\n  const url = `https://api.scryfall.com/cards/named?exact=${encodeURI(cardName)}`;\n  const response = await fetch(url);\n  const cardJson = await response.json();\n\n  var color_pile = cardJson['color_identity'].join('');\n  if (color_pile.length > 1) {\n    color_pile = 'M' // multicolor\n  } else if (color_pile.length === 0) {\n    color_pile = 'C' // colorless\n  }\n\n  return {\n    color_pile,\n    cmc: cardJson['cmc'],\n  }\n}\n","// This file contains components and logic related to importing and exporting from text formats.\n\nimport React from 'react';\nimport BoardState from './boardState.js';\n\n// Card pool input components\nconst CardPoolInput = function (props) {\n  return (\n    <textarea id={props.id} rows=\"5\" cols=\"33\"></textarea>\n  );\n}\n\nconst isNumber = (text) => {\n  return !Number.isNaN(Number(text));\n}\n\nclass LoadInputButton extends React.Component {\n  load() {\n    const rawInput = document.getElementById(this.props.inputElementId).value;\n    // For now, just trim off quantities if present. TODO: actually use the quantities\n    const cardNames = rawInput.split(\"\\n\").map((line) => {\n      line = isNumber(line[0]) ? line.substring(line.indexOf(\" \")) : line;\n      return line.trim();\n    }).filter(line => line.trim().length > 0);\n\n    const numCols = this.props.topLevelContainer.state.boardState.numCols;\n    this.props.topLevelContainer.setState({\n      boardState: new BoardState(cardNames, numCols),\n      sideboardState: new BoardState([], 1)\n    });\n  }\n\n  render() {\n    return (\n      <input type=\"button\" onClick={() => this.load()} value=\"Load cards\" />\n    );\n  }\n}\n\n// Export button components\nconst toCockatriceFormat = (maindeck, sideboard) => {\n  return maindeck.map(c => c.name).join(\"\\n\") +\n    \"\\n\\n// Sideboard\\n\" +\n    sideboard.map(c => c.name).join(\"\\n\");\n}\n\nconst writeToClipboardAndAlert = (text) => {\n  navigator.clipboard.writeText(text)\n    .then(() => alert(`Copied to clipboard:\\n\\n${text}`),\n      () => alert(`Failed to copy to clipboard`));\n}\n\nconst ExportButton = function (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => {\n        const output = toCockatriceFormat(props.boardState.cardColumns.flat(), props.sideboardState.cardColumns.flat());\n        writeToClipboardAndAlert(output);\n      }}\n      value=\"Export to Cockatrice\" />\n  );\n}\n\nexport {\n  CardPoolInput,\n  LoadInputButton,\n  ExportButton,\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Backend from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { useDrag, useDrop } from 'react-dnd'\nimport './index.css';\nimport BoardState from './boardState.js';\nimport { CardPoolInput, LoadInputButton, ExportButton } from './importExport.js';\n\nconst IMG_WIDTH = 146;\nconst IMG_HEIGHT = 204;\nconst COL_WIDTH = IMG_WIDTH + 1;\nconst CARD_STACKING_OFFSET = 25;\nconst NUM_COLS = 8; // TODO: make this consistent with css width\nconst INITIAL_CARD_NAMES = ['Battle Hymn', 'Reaper King', 'Death or Glory', 'Mindless Automaton',\n                            'Wizard Mentor', 'Crow Storm', \"Gaea's Touch\"];\n\n// Card react component - displays a single draggable card\nfunction Card(props) {\n  const [_, drag] = useDrag({\n    item: { type: \"Card\", card: props.card },\n  });\n\n  const imageURL = `https://api.scryfall.com/cards/named?format=image&exact=${encodeURI(props.card.name)}`;\n  return (\n    <img\n      ref={drag}\n      src={imageURL} width={IMG_WIDTH} height={IMG_HEIGHT}\n      style={{\n        position: \"absolute\",\n        top: `${props.top}px`,\n        left: `${props.left}px`,\n        zIndex: `${props.zIndex}`,\n      }} />\n  );\n}\n\n// Board react component - the space that all the cards are in\nfunction Board(props) {\n  const [{ mousePos }, drop] = useDrop({\n    accept: \"Card\",\n    drop: (item, monitor) => dropCard(props.boardState, monitor.getClientOffset(), item.card),\n    collect: monitor => ({\n      mousePos: monitor.getClientOffset(),\n    }),\n  })\n\n  const cardImages = [];\n  const cardColumns = props.boardState.cardColumns;\n  for (var col = 0; col < cardColumns.length; col++) {\n    for (var i = 0; i < cardColumns[col].length; i++) {\n      const card = cardColumns[col][i]\n      const topOffset = CARD_STACKING_OFFSET * i;\n      const leftOffset = COL_WIDTH * col;\n\n      cardImages.push(<Card key={card.id.toString()} card={card} top={topOffset} left={leftOffset} zIndex={i} />);\n    }\n  }\n\n  const widthPx = COL_WIDTH * props.boardState.numCols;\n  return (\n    <div ref={drop} className=\"card-space\" style={{position: \"relative\", width: `${widthPx}px`}}>\n      {cardImages}\n    </div>\n  );\n}\n\n// Helper used by Board\nconst dropCard = (boardState, clientOffset, card) => {\n  const newCol = Math.min(Math.floor(clientOffset.x / COL_WIDTH), boardState.numCols - 1);\n  const newIndexInCol = Math.floor(clientOffset.y / CARD_STACKING_OFFSET);\n\n  boardState.moveCard(card, newCol, newIndexInCol);\n}\n\n// Sort components\nfunction SortByCmcButton (props) {\n  return (\n    <input type=\"button\"\n      onClick={() => props.topLevelContainer.setState({boardState: props.topLevelContainer.state.boardState.sortByCmc()})}\n      value=\"Sort by CMC\" />\n  );\n}\n\n// Top-level container component to put everything together\nclass TopLevelContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      boardState: new BoardState(INITIAL_CARD_NAMES, NUM_COLS),\n      sideboardState: new BoardState([], 1),\n    };\n  }\n\n  render() {\n    const CARD_POOL_INPUT_ELEMENT_ID = 'card-pool-input';\n    return (\n      <div>\n        <Board boardState={this.state.boardState} />\n        <Board boardState={this.state.sideboardState} />\n        <CardPoolInput id={CARD_POOL_INPUT_ELEMENT_ID} />\n        <LoadInputButton inputElementId={CARD_POOL_INPUT_ELEMENT_ID} topLevelContainer={this} />\n        <SortByCmcButton topLevelContainer={this} />\n        <ExportButton boardState={this.state.boardState} sideboardState={this.state.sideboardState} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <DndProvider backend={Backend}>\n    <TopLevelContainer />\n  </DndProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}